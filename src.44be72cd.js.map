{"version":3,"sources":["node_modules/stats.js/build/stats.min.js","../src/index.js","../src/math/MathUtil.js","../src/math/Span.js","../src/utils/WebGLUtil.js","../src/utils/DomUtil.js","../src/utils/ImgUtil.js","../src/utils/Util.js","../src/utils/Puid.js","../src/core/Pool.js","../src/debug/Stats.js","../src/events/EventDispatcher.js","../src/math/Integration.js","../src/core/Proton.js","../src/utils/Rgb.js","../src/math/ease.js","../src/math/Vector2D.js","../src/core/Particle.js","../src/utils/ColorUtil.js","../src/math/Polar2D.js","../src/math/Mat3.js","../src/math/ArraySpan.js","../src/math/Rectangle.js","../src/initialize/Rate.js","../src/initialize/Initialize.js","../src/initialize/Life.js","../src/zone/Zone.js","../src/zone/PointZone.js","../src/initialize/Position.js","../src/initialize/Velocity.js","../src/initialize/Mass.js","../src/initialize/Radius.js","../src/initialize/Body.js","../src/behaviour/Behaviour.js","../src/behaviour/Force.js","../src/behaviour/Attraction.js","../src/behaviour/RandomDrift.js","../src/behaviour/Gravity.js","../src/behaviour/Collision.js","../src/behaviour/CrossZone.js","../src/behaviour/Alpha.js","../src/behaviour/Scale.js","../src/behaviour/Rotate.js","../src/behaviour/Color.js","../src/behaviour/Cyclone.js","../src/behaviour/Repulsion.js","../src/behaviour/GravityWell.js","../src/initialize/InitializeUtil.js","../src/emitter/Emitter.js","../src/emitter/BehaviourEmitter.js","../src/emitter/FollowEmitter.js","../src/render/BaseRenderer.js","../src/render/CanvasRenderer.js","../src/render/DomRenderer.js","../src/render/EaselRenderer.js","../src/render/PixelRenderer.js","../src/render/PixiRenderer.js","../src/utils/MStack.js","../src/render/WebGLRenderer.js","../src/render/CustomRenderer.js","../src/zone/LineZone.js","../src/zone/CircleZone.js","../src/zone/RectZone.js","../src/zone/ImageZone.js","../src/debug/Debug.js","../src/RAFManager.js","src/index.js"],"names":["ease","PI","MathUtil","num","this","Infinity","a","b","Math","floor","random","center","f","isInt","randomAToB","toString","slice","k","digits","pow","Span","isArray","Util","getRandFromArray","randomFloating","c","undefined","pan","getValue","initValue","length","i","tx","ty","a00","a01","a02","a10","a11","a12","a20","a21","a22","b00","b01","b02","b10","b11","b12","b20","b21","b22","id","width","height","position","dom","document","createElement","style","opacity","transform","resize","marginLeft","marginTop","div","x","y","scale","rotate","willChange","css3","key","val","bkey","charAt","toUpperCase","substr","imgsCache","canvasCache","canvasId","img","callback","param","src","image","Image","onload","e","target","value","defaults","Object","prototype","call","arr","obj","ignore","indexOf","constructor","args","bind","apply","concat","particle","conf","hasProp","p","v","copy","props","prop","hasOwnProperty","getSpanValue","context","rect","ImgUtil","drawImage","imagedata","getImageData","clearRect","destroy","source","assign","idsMap","Puid","type","uid","getIdFromCache","_index","_cache","isBody","isInner","Pool","params","__puid","getId","cache","pop","createOrClone","getCache","push","total","create","classApply","clone","count","Stats","body","add","emitter","getEmitter","renderer","getRenderer","str","proton","emitters","emitSpeed","getEmitterPos","initializes","concatArr","behaviours","name","getCreatedNumber","getCount","pool","container","innerHTML","cssText","join","addEventListener","_this","bg","color","parentNode","appendChild","emitterIndex","renderers","rendererIndex","result","cpool","round","EventDispatcher","listener","_listeners","removeEventListener","splice","listeners","handler","dispatchEvent","hasEventListener","removeAllEventListeners","Integration","particles","time","damping","eulerIntegrate","sleep","old","multiplyScalar","mass","clear","Proton","render","init","index","remove","parent","EMITTER_ADDED","EMITTER_REMOVED","_fps","PROTON_UPDATE","USE_CLOCK","then","Date","getTime","now","elapsed","amendChangeTabsBug","emittersUpdate","DEFAULT_INTERVAL","PROTON_UPDATE_AFTER","_interval","update","destroyAll","destroyOther","getAllParticles","fps","integrationType","stats","EULER","integrator","MEASURE","RK2","PARTICLE_CREATED","PARTICLE_UPDATE","PARTICLE_SLEEP","PARTICLE_DEAD","Rgb","r","g","cos","PI_2","sin","sqrt","s","easeLinear","Vector2D","atan2","w","addVectors","subVectors","set","divideScalar","distanceToSquared","tha","dx","dy","alpha","Particle","N180_PI","life","age","dead","sprite","energy","radius","rotation","easing","rgb","reset","emptyObject","data","removeAllBehaviours","applyBehaviours","max","applyBehaviour","behaviour","parents","initialize","addBehaviour","emptyArray","setProp","h","hex16","substring","parseInt","rbg","Number","Polar2D","getX","getY","abs","Mat3","mat3","mat","Float32Array","mat1","mat2","m","vec","ArraySpan","_arr","randomColor","toArray","Rectangle","right","bottom","Rate","startTime","nextTime","timePan","numPan","numpan","timepan","setSpanValue","Initialize","Life","lifePan","Zone","vector","crossType","alert","PointZone","error","Position","zone","getPosition","Velocity","rpan","thapan","rPan","thaPan","vr","polar2d","normalizeVelocity","PI_180","Mass","massPan","Radius","oldRadius","Body","imageTarget","Behaviour","getEasing","force","removeBehaviour","Force","fx","fy","normalizeForce","calculate","Attraction","targetPosition","normalizeValue","radiusSq","attractionForce","lengthSq","sub","normalize","RandomDrift","driftX","driftY","delay","panFoce","addXY","Gravity","Collision","collisionPool","delta","newPool","otherParticle","overlap","totalMass","averageMass1","averageMass2","distance","CrossZone","crossing","Alpha","same","alphaA","alphaB","Scale","scaleA","scaleB","Rotate","rotationA","rotationB","getDirection","influence","Color","createArraySpan","colorA","ColorUtil","hexToRgb","colorB","CHANGING","Cyclone","angle","span","String","toLowerCase","setAngleAndForce","cangle","cyclone","gradient","getGradient","Repulsion","GravityWell","centerPoint","distanceVec","distanceSq","factor","bindEmitter","setVectorVal","degreeTransform","Emitter","totalTime","stoped","emitTime","isNaN","rate","oldStoped","oldEmitTime","oldTotalTime","initAll","rest","initializer","arguments","emitting","integrate","dispatch","expire","event","bindEvent","createParticle","get","setupParticle","addBehaviours","stop","removeAllInitializers","removeEmitter","BehaviourEmitter","selfBehaviours","FollowEmitter","mousemoveHandler","_this2","mousemove","mousedownHandler","mousedown","mouseupHandler","mouseup","mouseTarget","_allowEmitting","layerX","layerY","offsetX","offsetY","babelHelpers.get","window","initEventHandler","BaseRenderer","thinkness","stroke","_protonUpdateHandler","onProtonUpdate","_protonUpdateAfterHandler","onProtonUpdateAfter","_emitterAddedHandler","onEmitterAdded","_emitterRemovedHandler","onEmitterRemoved","_particleCreatedHandler","onParticleCreated","_particleUpdateHandler","onParticleUpdate","_particleDeadHandler","onParticleDead","element","circleConf","isCircle","initHandler","CanvasRenderer","addImg2Body","drawCircle","buffer","createBuffer","bufContext","getContext","globalAlpha","globalCompositeOperation","fillStyle","rgbToHex","fillRect","save","translate","restore","beginPath","arc","strokeStyle","lineWidth","closePath","fill","size","canvas","bufferCache","DomRenderer","bodyReady","transform3d","DomUtil","backgroundColor","removeChild","babelHelpers.typeof","createCircle","createSprite","createDiv","borderRadius","borderColor","borderWidth","url","backgroundImage","createBody","EaselRenderer","addChild","scaleX","scaleY","graphics","regX","regY","createjs","Graphics","beginStroke","beginFill","shape","Shape","PixelRenderer","rectangle","imageData","createImageData","putImageData","setPixel","elementwidth","PIXIClass","PixiRenderer","PIXI","Sprite","createFromImage","from","fromImage","blendMode","setColor","tint","getHex16FromParticle","anchor","endFill","setPIXI","MStack","mats","multiply","WebGLRenderer","umat","smat","mstack","gl","viewport","circleCanvasURL","texturebuffers","A","blendEquation","B","blendFunc","fs","shader","createShader","FRAGMENT_SHADER","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","fragmentShader","getShader","getFragmentShader","vertexShader","getVertexShader","sprogram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","useProgram","vpa","getAttribLocation","tca","enableVertexAttribArray","tMatUniform","getUniformLocation","samplerUniform","useTex","uniform1i","idx","unitIBuffer","bindBuffer","ELEMENT_ARRAY_BUFFER","bufferData","Uint16Array","STATIC_DRAW","ids","unitI33","stripBuffer","raidus","circleCanvasRadius","WebGLUtil","createCanvas","toDataURL","_w","_h","_width","_height","_scaleX","_scaleY","createTexture","texture","vcBuffer","tcBuffer","ARRAY_BUFFER","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","LINEAR_MIPMAP_NEAREST","generateMipmap","textureLoaded","textureWidth","textureHeight","tmat","imat","oldScale","drawImg2Canvas","updateMatrix","uniform3f","uniformMatrix3fv","top","vertexAttribPointer","FLOAT","drawElements","TRIANGLES","UNSIGNED_SHORT","moveOriginMatrix","translationMatrix","rotationMatrix","angleInRadians","scaleMatrix","sx","sy","matrix","inverse","antialias","stencil","depth","initVar","setMaxRadius","initShaders","initBuffers","FUNC_ADD","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","enable","BLEND","CustomRenderer","LineZone","x1","y1","dot","xxyy","tha2","oldx","oldy","maxx","minx","maxy","miny","direction","rangeOut","getDistance","getSymmetric","x2","y2","min","getLength","CircleZone","PIx2","randomRadius","d","distanceTo","RectZone","ImageZone","vectors","setVectors","j","length1","length2","getBound","negate","func","getStyle","moveTo","lineTo","drawRect","P","Vector","Polar","getSpan","Init","L","V","M","R","F","RD","G","S","WebGlRenderer","Debug","vendors","requestAnimationFrame","cancelAnimationFrame","aniData","n","animations","start","getIndex","deleteMap","state","tick","timer","main","initCanvas","initStats","createProton","getElementById","innerWidth","innerHeight","onresize","setMode","domElement","left","addInitialize","easeOutQuart","emit","addEmitter","addRenderer","begin","end"],"mappings":"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","file":"src.44be72cd.js","sourceRoot":"..","sourcesContent":["// stats.js - http://github.com/mrdoob/stats.js\n(function(f,e){\"object\"===typeof exports&&\"undefined\"!==typeof module?module.exports=e():\"function\"===typeof define&&define.amd?define(e):f.Stats=e()})(this,function(){var f=function(){function e(a){c.appendChild(a.dom);return a}function u(a){for(var d=0;d<c.children.length;d++)c.children[d].style.display=d===a?\"block\":\"none\";l=a}var l=0,c=document.createElement(\"div\");c.style.cssText=\"position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000\";c.addEventListener(\"click\",function(a){a.preventDefault();\nu(++l%c.children.length)},!1);var k=(performance||Date).now(),g=k,a=0,r=e(new f.Panel(\"FPS\",\"#0ff\",\"#002\")),h=e(new f.Panel(\"MS\",\"#0f0\",\"#020\"));if(self.performance&&self.performance.memory)var t=e(new f.Panel(\"MB\",\"#f08\",\"#201\"));u(0);return{REVISION:16,dom:c,addPanel:e,showPanel:u,begin:function(){k=(performance||Date).now()},end:function(){a++;var c=(performance||Date).now();h.update(c-k,200);if(c>g+1E3&&(r.update(1E3*a/(c-g),100),g=c,a=0,t)){var d=performance.memory;t.update(d.usedJSHeapSize/\n1048576,d.jsHeapSizeLimit/1048576)}return c},update:function(){k=this.end()},domElement:c,setMode:u}};f.Panel=function(e,f,l){var c=Infinity,k=0,g=Math.round,a=g(window.devicePixelRatio||1),r=80*a,h=48*a,t=3*a,v=2*a,d=3*a,m=15*a,n=74*a,p=30*a,q=document.createElement(\"canvas\");q.width=r;q.height=h;q.style.cssText=\"width:80px;height:48px\";var b=q.getContext(\"2d\");b.font=\"bold \"+9*a+\"px Helvetica,Arial,sans-serif\";b.textBaseline=\"top\";b.fillStyle=l;b.fillRect(0,0,r,h);b.fillStyle=f;b.fillText(e,t,v);\nb.fillRect(d,m,n,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d,m,n,p);return{dom:q,update:function(h,w){c=Math.min(c,h);k=Math.max(k,h);b.fillStyle=l;b.globalAlpha=1;b.fillRect(0,0,r,m);b.fillStyle=f;b.fillText(g(h)+\" \"+e+\" (\"+g(c)+\"-\"+g(k)+\")\",t,v);b.drawImage(q,d+a,m,n-a,p,d,m,n-a,p);b.fillRect(d+n-a,m,a,p);b.fillStyle=l;b.globalAlpha=.9;b.fillRect(d+n-a,m,a,g((1-h/w)*p))}}};return f});\n","import Stats from \"stats.js\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport \"./styles.css\";\n\nlet stats;\nlet canvas;\nlet context;\nlet proton;\nlet renderer;\nlet emitter;\n\nmain();\n\nfunction main() {\n  initCanvas();\n  initStats();\n  createProton();\n  render();\n}\n\nfunction initCanvas() {\n  canvas = document.getElementById(\"canvas\");\n  canvas.width = window.innerWidth;\n  canvas.height = window.innerHeight;\n  context = canvas.getContext(\"2d\");\n\n  window.onresize = function(e) {\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    emitter.p.x = canvas.width / 2;\n    emitter.p.y = canvas.height / 2;\n  };\n}\n\nfunction initStats() {\n  stats = new Stats();\n  stats.setMode(2);\n  stats.domElement.style.position = \"absolute\";\n  stats.domElement.style.left = \"0px\";\n  stats.domElement.style.top = \"0px\";\n  document.body.appendChild(stats.domElement);\n}\n\nfunction createProton() {\n  proton = new Proton();\n  emitter = new Proton.Emitter();\n  emitter.rate = new Proton.Rate(\n    new Proton.Span(10, 20),\n    new Proton.Span(0.1, 0.25)\n  );\n  emitter.addInitialize(new Proton.Mass(1));\n  emitter.addInitialize(new Proton.Radius(1, 12));\n  emitter.addInitialize(new Proton.Life(2, 4));\n  emitter.addInitialize(\n    new Proton.Velocity(\n      new Proton.Span(2, 4),\n      new Proton.Span(-30, 30),\n      \"polar\"\n    )\n  );\n  emitter.addBehaviour(new Proton.RandomDrift(30, 30, 0.05));\n  emitter.addBehaviour(\n    new Proton.Color(\"ff0000\", \"random\", Infinity, Proton.easeOutQuart)\n  );\n  emitter.addBehaviour(new Proton.Scale(1, 0.7));\n  emitter.p.x = canvas.width / 2;\n  emitter.p.y = canvas.height / 2;\n  emitter.emit();\n\n  proton.addEmitter(emitter);\n  renderer = new Proton.CanvasRenderer(canvas);\n  renderer.onProtonUpdate = () => {\n    context.fillStyle = \"rgba(0, 0, 0, 0.1)\";\n    context.fillRect(0, 0, canvas.width, canvas.height);\n  };\n  proton.addRenderer(renderer);\n}\n\nfunction render() {\n  RAFManager.add(() => {\n    stats.begin();\n    emitter.rotation += 1.5;\n    proton.update();\n    stats.end();\n  });\n}\n","const PI = 3.1415926;\nconst INFINITY = Infinity;\n\nconst MathUtil = {\n  PI: PI,\n  PIx2: PI * 2,\n  PI_2: PI / 2,\n  PI_180: PI / 180,\n  N180_PI: 180 / PI,\n  Infinity: -999,\n\n  isInfinity(num) {\n    return num === this.Infinity || num === INFINITY;\n  },\n\n  randomAToB(a, b, isInt = false) {\n    if (!isInt) return a + Math.random() * (b - a);\n    else return Math.floor(Math.random() * (b - a)) + a;\n  },\n\n  randomFloating(center, f, isInt) {\n    return this.randomAToB(center - f, center + f, isInt);\n  },\n\n  randomColor() {\n    return (\n      \"#\" +\n      (\"00000\" + ((Math.random() * 0x1000000) << 0).toString(16)).slice(-6)\n    );\n  },\n\n  randomZone(display) {},\n\n  floor(num, k = 4) {\n    const digits = Math.pow(10, k);\n    return Math.floor(num * digits) / digits;\n  },\n\n  degreeTransform(a) {\n    return (a * PI) / 180;\n  },\n\n  toColor16(num) {\n    return `#${num.toString(16)}`;\n  }\n};\n\nexport default MathUtil;\n","import Util from \"../utils/Util\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class Span {\n  constructor(a, b, center) {\n    if (Util.isArray(a)) {\n      this.isArray = true;\n      this.a = a;\n    } else {\n      this.isArray = false;\n      this.a = Util.initValue(a, 1);\n      this.b = Util.initValue(b, this.a);\n      this.center = Util.initValue(center, false);\n    }\n  }\n\n  getValue(isInt = false) {\n    if (this.isArray) {\n      return Util.getRandFromArray(this.a);\n    } else {\n      if (!this.center) {\n        return MathUtil.randomAToB(this.a, this.b, isInt);\n      } else {\n        return MathUtil.randomFloating(this.a, this.b, isInt);\n      }\n    }\n  }\n\n  /**\n   * Returns a new Span object\n   *\n   * @memberof Proton#Proton.Util\n   * @method setSpanValue\n   *\n   * @todo a, b and c should be 'Mixed' or 'Number'?\n   *\n   * @param {Mixed | Span} a\n   * @param {Mixed}               b\n   * @param {Mixed}               c\n   *\n   * @return {Span}\n   */\n  static setSpanValue(a, b, c) {\n    if (a instanceof Span) {\n      return a;\n    } else {\n      if (b === undefined) {\n        return new Span(a);\n      } else {\n        if (c === undefined) return new Span(a, b);\n        else return new Span(a, b, c);\n      }\n    }\n  }\n\n  /**\n   * Returns the value from a Span, if the param is not a Span it will return the given parameter\n   *\n   * @memberof Proton#Proton.Util\n   * @method getValue\n   *\n   * @param {Mixed | Span} pan\n   *\n   * @return {Mixed} the value of Span OR the parameter if it is not a Span\n   */\n  static getSpanValue(pan) {\n    return pan instanceof Span ? pan.getValue() : pan;\n  }\n}\n","export default {\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method ipot\n   *\n   * @todo add description\n   * @todo add length description\n   *\n   * @param {Number} length\n   *\n   * @return {Boolean}\n   */\n  ipot(length) {\n    return (length & (length - 1)) === 0;\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method nhpot\n   *\n   * @todo add description\n   * @todo add length description\n   *\n   * @param {Number} length\n   *\n   * @return {Number}\n   */\n  nhpot(length) {\n    --length;\n    for (let i = 1; i < 32; i <<= 1) {\n      length = length | (length >> i);\n    }\n\n    return length + 1;\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method makeTranslation\n   *\n   * @todo add description\n   * @todo add tx, ty description\n   * @todo add return description\n   *\n   * @param {Number} tx either 0 or 1\n   * @param {Number} ty either 0 or 1\n   *\n   * @return {Object}\n   */\n  makeTranslation(tx, ty) {\n    return [1, 0, 0, 0, 1, 0, tx, ty, 1];\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method makeRotation\n   *\n   * @todo add description\n   * @todo add return description\n   *\n   * @param {Number} angleInRadians\n   *\n   * @return {Object}\n   */\n  makeRotation(angleInRadians) {\n    let c = Math.cos(angleInRadians);\n    let s = Math.sin(angleInRadians);\n\n    return [c, -s, 0, s, c, 0, 0, 0, 1];\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method makeScale\n   *\n   * @todo add description\n   * @todo add tx, ty description\n   * @todo add return description\n   *\n   * @param {Number} sx either 0 or 1\n   * @param {Number} sy either 0 or 1\n   *\n   * @return {Object}\n   */\n  makeScale(sx, sy) {\n    return [sx, 0, 0, 0, sy, 0, 0, 0, 1];\n  },\n\n  /**\n   * @memberof Proton#Proton.WebGLUtil\n   * @method matrixMultiply\n   *\n   * @todo add description\n   * @todo add a, b description\n   * @todo add return description\n   *\n   * @param {Object} a\n   * @param {Object} b\n   *\n   * @return {Object}\n   */\n  matrixMultiply(a, b) {\n    let a00 = a[0 * 3 + 0];\n    let a01 = a[0 * 3 + 1];\n    let a02 = a[0 * 3 + 2];\n    let a10 = a[1 * 3 + 0];\n    let a11 = a[1 * 3 + 1];\n    let a12 = a[1 * 3 + 2];\n    let a20 = a[2 * 3 + 0];\n    let a21 = a[2 * 3 + 1];\n    let a22 = a[2 * 3 + 2];\n    let b00 = b[0 * 3 + 0];\n    let b01 = b[0 * 3 + 1];\n    let b02 = b[0 * 3 + 2];\n    let b10 = b[1 * 3 + 0];\n    let b11 = b[1 * 3 + 1];\n    let b12 = b[1 * 3 + 2];\n    let b20 = b[2 * 3 + 0];\n    let b21 = b[2 * 3 + 1];\n    let b22 = b[2 * 3 + 2];\n\n    return [\n      a00 * b00 + a01 * b10 + a02 * b20,\n      a00 * b01 + a01 * b11 + a02 * b21,\n      a00 * b02 + a01 * b12 + a02 * b22,\n      a10 * b00 + a11 * b10 + a12 * b20,\n      a10 * b01 + a11 * b11 + a12 * b21,\n      a10 * b02 + a11 * b12 + a12 * b22,\n      a20 * b00 + a21 * b10 + a22 * b20,\n      a20 * b01 + a21 * b11 + a22 * b21,\n      a20 * b02 + a21 * b12 + a22 * b22\n    ];\n  }\n};\n","export default {\n  /**\n   * Creates and returns a new canvas. The opacity is by default set to 0\n   *\n   * @memberof Proton#Proton.DomUtil\n   * @method createCanvas\n   *\n   * @param {String} $id the canvas' id\n   * @param {Number} $width the canvas' width\n   * @param {Number} $height the canvas' height\n   * @param {String} [$position=absolute] the canvas' position, default is 'absolute'\n   *\n   * @return {Object}\n   */\n  createCanvas(id, width, height, position = \"absolute\") {\n    const dom = document.createElement(\"canvas\");\n\n    dom.id = id;\n    dom.width = width;\n    dom.height = height;\n    dom.style.opacity = 0;\n    dom.style.position = position;\n    this.transform(dom, -500, -500, 0, 0);\n\n    return dom;\n  },\n\n  createDiv(id, width, height) {\n    const dom = document.createElement(\"div\");\n\n    dom.id = id;\n    dom.style.position = \"absolute\";\n    this.resize(dom, width, height);\n\n    return dom;\n  },\n\n  resize(dom, width, height) {\n    dom.style.width = width + \"px\";\n    dom.style.height = height + \"px\";\n    dom.style.marginLeft = -width / 2 + \"px\";\n    dom.style.marginTop = -height / 2 + \"px\";\n  },\n\n  /**\n   * Adds a transform: translate(), scale(), rotate() to a given div dom for all browsers\n   *\n   * @memberof Proton#Proton.DomUtil\n   * @method transform\n   *\n   * @param {HTMLDivElement} div\n   * @param {Number} $x\n   * @param {Number} $y\n   * @param {Number} $scale\n   * @param {Number} $rotate\n   */\n  transform(div, x, y, scale, rotate) {\n    div.style.willChange = \"transform\";\n    const transform = `translate(${x}px, ${y}px) scale(${scale}) rotate(${rotate}deg)`;\n    this.css3(div, \"transform\", transform);\n  },\n\n  transform3d(div, x, y, scale, rotate) {\n    div.style.willChange = \"transform\";\n    const transform = `translate3d(${x}px, ${y}px, 0) scale(${scale}) rotate(${rotate}deg)`;\n    this.css3(div, \"backfaceVisibility\", \"hidden\");\n    this.css3(div, \"transform\", transform);\n  },\n\n  css3(div, key, val) {\n    const bkey = key.charAt(0).toUpperCase() + key.substr(1);\n\n    div.style[`Webkit${bkey}`] = val;\n    div.style[`Moz${bkey}`] = val;\n    div.style[`O${bkey}`] = val;\n    div.style[`ms${bkey}`] = val;\n    div.style[`${key}`] = val;\n  }\n};\n","import WebGLUtil from \"./WebGLUtil\";\nimport DomUtil from \"./DomUtil\";\n\nconst imgsCache = {};\nconst canvasCache = {};\nlet canvasId = 0;\n\nexport default {\n  /**\n   * This will get the image data. It could be necessary to create a Proton.Zone.\n   *\n   * @memberof Proton#Proton.Util\n   * @method getImageData\n   *\n   * @param {HTMLCanvasElement}   context any canvas, must be a 2dContext 'canvas.getContext('2d')'\n   * @param {Object}              image   could be any dom image, e.g. document.getElementById('thisIsAnImgTag');\n   * @param {Proton.Rectangle}    rect\n   */\n  getImageData(context, image, rect) {\n    context.drawImage(image, rect.x, rect.y);\n    const imagedata = context.getImageData(\n      rect.x,\n      rect.y,\n      rect.width,\n      rect.height\n    );\n    context.clearRect(rect.x, rect.y, rect.width, rect.height);\n\n    return imagedata;\n  },\n\n  /**\n   * @memberof Proton#Proton.Util\n   * @method getImgFromCache\n   *\n   * @todo add description\n   * @todo describe func\n   *\n   * @param {Mixed}               img\n   * @param {Proton.Particle}     particle\n   * @param {Boolean}             drawCanvas  set to true if a canvas should be saved into particle.data.canvas\n   * @param {Boolean}             func\n   */\n  getImgFromCache(img, callback, param) {\n    const src = typeof img === \"string\" ? img : img.src;\n\n    if (imgsCache[src]) {\n      callback(imgsCache[src], param);\n    } else {\n      const image = new Image();\n      image.onload = e => {\n        imgsCache[src] = e.target;\n        callback(imgsCache[src], param);\n      };\n\n      image.src = src;\n    }\n  },\n\n  getCanvasFromCache(img, callback, param) {\n    const src = img.src;\n\n    if (!canvasCache[src]) {\n      const width = WebGLUtil.nhpot(img.width);\n      const height = WebGLUtil.nhpot(img.height);\n\n      const canvas = DomUtil.createCanvas(\n        `proton_canvas_cache_${++canvasId}`,\n        width,\n        height\n      );\n      const context = canvas.getContext(\"2d\");\n      context.drawImage(img, 0, 0, img.width, img.height);\n\n      canvasCache[src] = canvas;\n    }\n\n    callback && callback(canvasCache[src], param);\n\n    return canvasCache[src];\n  }\n};\n","import Span from \"../math/Span\";\nimport ImgUtil from \"./ImgUtil\";\n\nexport default {\n  /**\n   * Returns the default if the value is null or undefined\n   *\n   * @memberof Proton#Proton.Util\n   * @method initValue\n   *\n   * @param {Mixed} value a specific value, could be everything but null or undefined\n   * @param {Mixed} defaults the default if the value is null or undefined\n   */\n  initValue(value, defaults) {\n    value = value !== null && value !== undefined ? value : defaults;\n    return value;\n  },\n\n  /**\n   * Checks if the value is a valid array\n   *\n   * @memberof Proton#Proton.Util\n   * @method isArray\n   *\n   * @param {Array} value Any array\n   *\n   * @returns {Boolean}\n   */\n  isArray(value) {\n    return Object.prototype.toString.call(value) === \"[object Array]\";\n  },\n\n  /**\n   * Destroyes the given array\n   *\n   * @memberof Proton#Proton.Util\n   * @method emptyArray\n   *\n   * @param {Array} array Any array\n   */\n  emptyArray(arr) {\n    if (arr) arr.length = 0;\n  },\n\n  toArray(arr) {\n    return this.isArray(arr) ? arr : [arr];\n  },\n\n  getRandFromArray(arr) {\n    if (!arr) return null;\n    return arr[Math.floor(arr.length * Math.random())];\n  },\n\n  /**\n   * Destroyes the given object\n   *\n   * @memberof Proton#Proton.Util\n   * @method emptyObject\n   *\n   * @param {Object} obj Any object\n   */\n  emptyObject(obj, ignore = null) {\n    for (let key in obj) {\n      if (ignore && ignore.indexOf(key) > -1) continue;\n      delete obj[key];\n    }\n  },\n\n  /**\n   * Makes an instance of a class and binds the given array\n   *\n   * @memberof Proton#Proton.Util\n   * @method classApply\n   *\n   * @param {Function} constructor A class to make an instance from\n   * @param {Array} [args] Any array to bind it to the constructor\n   *\n   * @return {Object} The instance of constructor, optionally bind with args\n   */\n  classApply(constructor, args = null) {\n    if (!args) {\n      return new constructor();\n    } else {\n      const FactoryFunc = constructor.bind.apply(\n        constructor,\n        [null].concat(args)\n      );\n      return new FactoryFunc();\n    }\n  },\n\n  /**\n   * @memberof Proton#Proton.Util\n   * @method setVectorVal\n   *\n   * @todo add description for param `target`\n   * @todo add description for param `conf`\n   * @todo add description for function\n   *\n   * @param {Object} target\n   * @param {Object} conf\n   */\n  setVectorVal(particle, conf = null) {\n    if (!conf) return;\n\n    if (this.hasProp(conf, \"x\")) particle.p.x = conf[\"x\"];\n    if (this.hasProp(conf, \"y\")) particle.p.y = conf[\"y\"];\n\n    if (this.hasProp(conf, \"vx\")) particle.v.x = conf[\"vx\"];\n    if (this.hasProp(conf, \"vy\")) particle.v.y = conf[\"vy\"];\n\n    if (this.hasProp(conf, \"ax\")) particle.a.x = conf[\"ax\"];\n    if (this.hasProp(conf, \"ay\")) particle.a.y = conf[\"ay\"];\n\n    if (this.hasProp(conf, \"p\")) particle.p.copy(conf[\"p\"]);\n    if (this.hasProp(conf, \"v\")) particle.v.copy(conf[\"v\"]);\n    if (this.hasProp(conf, \"a\")) particle.a.copy(conf[\"a\"]);\n\n    if (this.hasProp(conf, \"position\")) particle.p.copy(conf[\"position\"]);\n    if (this.hasProp(conf, \"velocity\")) particle.v.copy(conf[\"velocity\"]);\n    if (this.hasProp(conf, \"accelerate\")) particle.a.copy(conf[\"accelerate\"]);\n  },\n\n  hasProp(target, key) {\n    if (!target) return false;\n    return target[key] !== undefined;\n    // return obj.hasOwnProperty(key);\n  },\n\n  /**\n   * set the prototype in a given prototypeObject\n   *\n   * @memberof Proton#Proton.Util\n   * @method setProp\n   *\n   * @todo add description for param `target`\n   * @todo translate desription from chinese to english\n   *\n   * @param {Object} target\n   * @param {Object} prototypeObject An object of single prototypes\n   *\n   * @return {Object} target\n   */\n  setProp(target, props) {\n    for (let prop in props) {\n      if (target.hasOwnProperty(prop)) {\n        target[prop] = Span.getSpanValue(props[prop]);\n      }\n    }\n\n    return target;\n  },\n\n  /**\n   * This will get the image data. It could be necessary to create a Proton.Zone.\n   *\n   * @memberof Proton#Proton.Util\n   * @method getImageData\n   *\n   * @param {HTMLCanvasElement}   context any canvas, must be a 2dContext 'canvas.getContext('2d')'\n   * @param {Object}              image   could be any dom image, e.g. document.getElementById('thisIsAnImgTag');\n   * @param {Proton.Rectangle}    rect\n   */\n  getImageData(context, image, rect) {\n    return ImgUtil.getImageData(context, image, rect);\n  },\n\n  destroyAll(arr, param = null) {\n    let i = arr.length;\n\n    while (i--) {\n      try {\n        arr[i].destroy(param);\n      } catch (e) {}\n\n      delete arr[i];\n    }\n\n    arr.length = 0;\n  },\n\n  assign(target, source) {\n    if (typeof Object.assign !== \"function\") {\n      for (let key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n\n      return target;\n    } else {\n      return Object.assign(target, source);\n    }\n  }\n};\n","const idsMap = {};\n\nconst Puid = {\n  _index: 0,\n  _cache: {},\n\n  id(type) {\n    if (idsMap[type] === undefined || idsMap[type] === null) idsMap[type] = 0;\n    return `${type}_${idsMap[type]++}`;\n  },\n\n  getId(target) {\n    let uid = this.getIdFromCache(target);\n    if (uid) return uid;\n\n    uid = `PUID_${this._index++}`;\n    this._cache[uid] = target;\n\n    return uid;\n  },\n\n  getIdFromCache(target) {\n    let obj, id;\n\n    for (id in this._cache) {\n      obj = this._cache[id];\n\n      if (obj === target) return id;\n      if (this.isBody(obj, target) && obj.src === target.src) return id;\n    }\n\n    return null;\n  },\n\n  isBody(obj, target) {\n    return (\n      typeof obj === \"object\" &&\n      typeof target === \"object\" &&\n      obj.isInner &&\n      target.isInner\n    );\n  },\n\n  getTarget(uid) {\n    return this._cache[uid];\n  }\n};\n\nexport default Puid;\n","/**\n * Pool is the cache pool of the proton engine, it is very important.\n *\n * get(target, params, uid)\n *  Class\n *    uid = Puid.getId -> Puid save target cache\n *    target.__puid = uid\n *\n *  body\n *    uid = Puid.getId -> Puid save target cache\n *\n *\n * expire(target)\n *  cache[target.__puid] push target\n *\n */\nimport Util from \"../utils/Util\";\nimport Puid from \"../utils/Puid\";\n\nexport default class Pool {\n  /**\n   * @memberof! Proton#\n   * @constructor\n   * @alias Proton.Pool\n   *\n   * @todo add description\n   * @todo add description of properties\n   *\n   * @property {Number} total\n   * @property {Object} cache\n   */\n  constructor(num) {\n    this.total = 0;\n    this.cache = {};\n  }\n\n  /**\n   * @todo add description\n   *\n   * @method get\n   * @memberof Proton#Proton.Pool\n   *\n   * @param {Object|Function} target\n   * @param {Object} [params] just add if `target` is a function\n   *\n   * @return {Object}\n   */\n  get(target, params, uid) {\n    let p;\n    uid = uid || target.__puid || Puid.getId(target);\n\n    if (this.cache[uid] && this.cache[uid].length > 0) {\n      p = this.cache[uid].pop();\n    } else {\n      p = this.createOrClone(target, params);\n    }\n\n    p.__puid = target.__puid || uid;\n    return p;\n  }\n\n  /**\n   * @todo add description\n   *\n   * @method set\n   * @memberof Proton#Proton.Pool\n   *\n   * @param {Object} target\n   *\n   * @return {Object}\n   */\n  expire(target) {\n    return this.getCache(target.__puid).push(target);\n  }\n\n  /**\n   * Creates a new class instance\n   *\n   * @todo add more documentation\n   *\n   * @method create\n   * @memberof Proton#Proton.Pool\n   *\n   * @param {Object|Function} target any Object or Function\n   * @param {Object} [params] just add if `target` is a function\n   *\n   * @return {Object}\n   */\n  createOrClone(target, params) {\n    this.total++;\n\n    if (this.create) {\n      return this.create(target, params);\n    } else if (typeof target === \"function\") {\n      return Util.classApply(target, params);\n    } else {\n      return target.clone();\n    }\n  }\n\n  /**\n   * @todo add description - what is in the cache?\n   *\n   * @method getCount\n   * @memberof Proton#Proton.Pool\n   *\n   * @return {Number}\n   */\n  getCount() {\n    let count = 0;\n    for (let id in this.cache) count += this.cache[id].length;\n    return count++;\n  }\n\n  /**\n   * Destroyes all items from Pool.cache\n   *\n   * @method destroy\n   * @memberof Proton#Proton.Pool\n   */\n  destroy() {\n    for (let id in this.cache) {\n      this.cache[id].length = 0;\n      delete this.cache[id];\n    }\n  }\n\n  /**\n   * Returns Pool.cache\n   *\n   * @method getCache\n   * @memberof Proton#Proton.Pool\n   * @private\n   *\n   * @param {Number} uid the unique id\n   *\n   * @return {Object}\n   */\n  getCache(uid = \"default\") {\n    if (!this.cache[uid]) this.cache[uid] = [];\n    return this.cache[uid];\n  }\n}\n","export default class Stats {\n  constructor(proton) {\n    this.proton = proton;\n    this.container = null;\n    this.type = 1;\n\n    this.emitterIndex = 0;\n    this.rendererIndex = 0;\n  }\n\n  update(style, body) {\n    this.add(style, body);\n\n    const emitter = this.getEmitter();\n    const renderer = this.getRenderer();\n    let str = \"\";\n\n    switch (this.type) {\n      case 2:\n        str += \"emitter:\" + this.proton.emitters.length + \"<br>\";\n        if (emitter) str += \"em speed:\" + emitter.emitSpeed + \"<br>\";\n        if (emitter) str += \"pos:\" + this.getEmitterPos(emitter);\n        break;\n\n      case 3:\n        if (emitter)\n          str += \"initializes:\" + emitter.initializes.length + \"<br>\";\n        if (emitter)\n          str +=\n            '<span style=\"display:inline-block;\">' +\n            this.concatArr(emitter.initializes) +\n            \"</span><br>\";\n        if (emitter) str += \"behaviours:\" + emitter.behaviours.length + \"<br>\";\n        if (emitter)\n          str +=\n            '<span style=\"display:inline-block;\">' +\n            this.concatArr(emitter.behaviours) +\n            \"</span><br>\";\n        break;\n\n      case 4:\n        if (renderer) str += renderer.name + \"<br>\";\n        if (renderer) str += \"body:\" + this.getCreatedNumber(renderer) + \"<br>\";\n        break;\n\n      default:\n        str += \"particles:\" + this.proton.getCount() + \"<br>\";\n        str += \"pool:\" + this.proton.pool.getCount() + \"<br>\";\n        str += \"total:\" + this.proton.pool.total;\n    }\n\n    this.container.innerHTML = str;\n  }\n\n  add(style, body) {\n    if (!this.container) {\n      this.type = 1;\n\n      this.container = document.createElement(\"div\");\n      this.container.style.cssText = [\n        \"position:absolute;bottom:0px;left:0;cursor:pointer;\",\n        \"opacity:0.9;z-index:10000;padding:10px;font-size:12px;font-family:Helvetica,Arial,sans-serif;\",\n        \"width:120px;height:50px;background-color:#002;color:#0ff;\"\n      ].join(\"\");\n\n      this.container.addEventListener(\n        \"click\",\n        e => {\n          this.type++;\n          if (this.type > 4) this.type = 1;\n        },\n        false\n      );\n\n      let bg, color;\n      switch (style) {\n        case 2:\n          bg = \"#201\";\n          color = \"#f08\";\n          break;\n\n        case 3:\n          bg = \"#020\";\n          color = \"#0f0\";\n          break;\n\n        default:\n          bg = \"#002\";\n          color = \"#0ff\";\n      }\n\n      this.container.style[\"background-color\"] = bg;\n      this.container.style[\"color\"] = color;\n    }\n\n    if (!this.container.parentNode) {\n      body = body || this.body || document.body;\n      body.appendChild(this.container);\n    }\n  }\n\n  getEmitter() {\n    return this.proton.emitters[this.emitterIndex];\n  }\n\n  getRenderer() {\n    return this.proton.renderers[this.rendererIndex];\n  }\n\n  concatArr(arr) {\n    let result = \"\";\n    if (!arr || !arr.length) return result;\n\n    for (let i = 0; i < arr.length; i++) {\n      result += (arr[i].name || \"\").substr(0, 1) + \".\";\n    }\n\n    return result;\n  }\n\n  getCreatedNumber(renderer) {\n    return renderer.pool.total || (renderer.cpool && renderer.cpool.total) || 0;\n  }\n\n  getEmitterPos(e) {\n    return Math.round(e.p.x) + \",\" + Math.round(e.p.y);\n  }\n}\n","/*\n * EventDispatcher\n * This code reference since http://createjs.com/.\n *\n **/\n\nexport default class EventDispatcher {\n  constructor() {\n    this._listeners = null;\n  }\n\n  static bind(target) {\n    target.prototype.dispatchEvent = EventDispatcher.prototype.dispatchEvent;\n\n    target.prototype.hasEventListener =\n      EventDispatcher.prototype.hasEventListener;\n\n    target.prototype.addEventListener =\n      EventDispatcher.prototype.addEventListener;\n\n    target.prototype.removeEventListener =\n      EventDispatcher.prototype.removeEventListener;\n\n    target.prototype.removeAllEventListeners =\n      EventDispatcher.prototype.removeAllEventListeners;\n  }\n\n  addEventListener(type, listener) {\n    if (!this._listeners) {\n      this._listeners = {};\n    } else {\n      this.removeEventListener(type, listener);\n    }\n\n    if (!this._listeners[type]) this._listeners[type] = [];\n    this._listeners[type].push(listener);\n\n    return listener;\n  }\n\n  removeEventListener(type, listener) {\n    if (!this._listeners) return;\n    if (!this._listeners[type]) return;\n\n    const arr = this._listeners[type];\n    const length = arr.length;\n\n    for (let i = 0; i < length; i++) {\n      if (arr[i] === listener) {\n        if (length === 1) {\n          delete this._listeners[type];\n        }\n\n        // allows for faster checks.\n        else {\n          arr.splice(i, 1);\n        }\n\n        break;\n      }\n    }\n  }\n\n  removeAllEventListeners(type) {\n    if (!type) this._listeners = null;\n    else if (this._listeners) delete this._listeners[type];\n  }\n\n  dispatchEvent(type, args) {\n    let result = false;\n    const listeners = this._listeners;\n\n    if (type && listeners) {\n      let arr = listeners[type];\n      if (!arr) return result;\n\n      // arr = arr.slice();\n      // to avoid issues with items being removed or added during the dispatch\n\n      let handler;\n      let i = arr.length;\n      while (i--) {\n        handler = arr[i];\n        result = result || handler(args);\n      }\n    }\n\n    return !!result;\n  }\n\n  hasEventListener(type) {\n    const listeners = this._listeners;\n    return !!(listeners && listeners[type]);\n  }\n}\n","export default class Integration {\n  constructor(type) {\n    this.type = type;\n  }\n\n  calculate(particles, time, damping) {\n    this.eulerIntegrate(particles, time, damping);\n  }\n\n  // Euler Integrate\n  // https://rosettacode.org/wiki/Euler_method\n  eulerIntegrate(particle, time, damping) {\n    if (!particle.sleep) {\n      particle.old.p.copy(particle.p);\n      particle.old.v.copy(particle.v);\n\n      particle.a.multiplyScalar(1 / particle.mass);\n      particle.v.add(particle.a.multiplyScalar(time));\n      particle.p.add(particle.old.v.multiplyScalar(time));\n\n      if (damping) particle.v.multiplyScalar(damping);\n\n      particle.a.clear();\n    }\n  }\n}\n","import Pool from \"./Pool\";\nimport Util from \"../utils/Util\";\nimport Stats from \"../debug/Stats\";\nimport EventDispatcher from \"../events/EventDispatcher\";\nimport MathUtil from \"../math/MathUtil\";\nimport Integration from \"../math/Integration\";\n\nexport default class Proton {\n  static USE_CLOCK = false;\n\n  // measure 1:100\n  static MEASURE = 100;\n  static EULER = \"euler\";\n  static RK2 = \"runge-kutta2\";\n\n  // event name\n  static PARTICLE_CREATED = \"PARTICLE_CREATED\";\n  static PARTICLE_UPDATE = \"PARTICLE_UPDATE\";\n  static PARTICLE_SLEEP = \"PARTICLE_SLEEP\";\n  static PARTICLE_DEAD = \"PARTICLE_DEAD\";\n\n  static EMITTER_ADDED = \"EMITTER_ADDED\";\n  static EMITTER_REMOVED = \"EMITTER_REMOVED\";\n\n  static PROTON_UPDATE = \"PROTON_UPDATE\";\n  static PROTON_UPDATE_AFTER = \"PROTON_UPDATE_AFTER\";\n  static DEFAULT_INTERVAL = 0.0167;\n\n  static amendChangeTabsBug = true;\n\n  /**\n   * The constructor to add emitters\n   *\n   * @constructor Proton\n   *\n   * @todo proParticleCount is not in use\n   * @todo add more documentation of the single properties and parameters\n   *\n   * @param {Number} [proParticleCount] not in use?\n   * @param {Number} [integrationType=Proton.EULER]\n   *\n   * @property {String} [integrationType=Proton.EULER]\n   * @property {Array} emitters   All added emitter\n   * @property {Array} renderers  All added renderer\n   * @property {Number} time      The active time\n   * @property {Number} oldtime   The old time\n   */\n  constructor(integrationType) {\n    this.emitters = [];\n    this.renderers = [];\n\n    this.time = 0;\n    this.now = 0;\n    this.then = 0;\n    this.elapsed = 0;\n\n    this.stats = new Stats(this);\n    this.pool = new Pool(80);\n\n    this.integrationType = Util.initValue(integrationType, Proton.EULER);\n    this.integrator = new Integration(this.integrationType);\n\n    this._fps = \"auto\";\n    this._interval = Proton.DEFAULT_INTERVAL;\n  }\n\n  set fps(fps) {\n    this._fps = fps;\n    this._interval =\n      fps === \"auto\" ? Proton.DEFAULT_INTERVAL : MathUtil.floor(1 / fps, 7);\n  }\n\n  get fps() {\n    return this._fps;\n  }\n\n  /**\n   * add a type of Renderer\n   *\n   * @method addRenderer\n   * @memberof Proton\n   * @instance\n   *\n   * @param {Renderer} render\n   */\n  addRenderer(render) {\n    render.init(this);\n    this.renderers.push(render);\n  }\n\n  /**\n   * @name add a type of Renderer\n   *\n   * @method addRenderer\n   * @param {Renderer} render\n   */\n  removeRenderer(render) {\n    const index = this.renderers.indexOf(render);\n    this.renderers.splice(index, 1);\n    render.remove(this);\n  }\n\n  /**\n   * add the Emitter\n   *\n   * @method addEmitter\n   * @memberof Proton\n   * @instance\n   *\n   * @param {Emitter} emitter\n   */\n  addEmitter(emitter) {\n    this.emitters.push(emitter);\n    emitter.parent = this;\n\n    this.dispatchEvent(Proton.EMITTER_ADDED, emitter);\n  }\n\n  /**\n   * Removes an Emitter\n   *\n   * @method removeEmitter\n   * @memberof Proton\n   * @instance\n   *\n   * @param {Proton.Emitter} emitter\n   */\n  removeEmitter(emitter) {\n    const index = this.emitters.indexOf(emitter);\n    this.emitters.splice(index, 1);\n    emitter.parent = null;\n\n    this.dispatchEvent(Proton.EMITTER_REMOVED, emitter);\n  }\n\n  /**\n   * Updates all added emitters\n   *\n   * @method update\n   * @memberof Proton\n   * @instance\n   */\n  update() {\n    // 'auto' is the default browser refresh rate, the vast majority is 60fps\n    if (this._fps === \"auto\") {\n      this.dispatchEvent(Proton.PROTON_UPDATE);\n\n      if (Proton.USE_CLOCK) {\n        if (!this.then) this.then = new Date().getTime();\n        this.now = new Date().getTime();\n        this.elapsed = (this.now - this.then) * 0.001;\n        // Fix bugs such as chrome browser switching tabs causing excessive time difference\n        this.amendChangeTabsBug();\n\n        if (this.elapsed > 0) this.emittersUpdate(this.elapsed);\n        this.then = this.now;\n      } else {\n        this.emittersUpdate(Proton.DEFAULT_INTERVAL);\n      }\n\n      this.dispatchEvent(Proton.PROTON_UPDATE_AFTER);\n    }\n\n    // If the fps frame rate is set\n    else {\n      if (!this.then) this.then = new Date().getTime();\n      this.now = new Date().getTime();\n      this.elapsed = (this.now - this.then) * 0.001;\n\n      if (this.elapsed > this._interval) {\n        this.dispatchEvent(Proton.PROTON_UPDATE);\n        this.emittersUpdate(this._interval);\n        // https://stackoverflow.com/questions/19764018/controlling-fps-with-requestanimationframe\n        this.then = this.now - (this.elapsed % this._interval) * 1000;\n        this.dispatchEvent(Proton.PROTON_UPDATE_AFTER);\n      }\n    }\n  }\n\n  emittersUpdate(elapsed) {\n    let i = this.emitters.length;\n    while (i--) this.emitters[i].update(elapsed);\n  }\n\n  /**\n   * @todo add description\n   *\n   * @method amendChangeTabsBug\n   * @memberof Proton\n   * @instance\n   */\n  amendChangeTabsBug() {\n    if (!Proton.amendChangeTabsBug) return;\n    if (this.elapsed > 0.5) {\n      this.then = new Date().getTime();\n      this.elapsed = 0;\n    }\n  }\n\n  /**\n   * Counts all particles from all emitters\n   *\n   * @method getCount\n   * @memberof Proton\n   * @instance\n   */\n  getCount() {\n    let total = 0;\n    let i = this.emitters.length;\n\n    while (i--) total += this.emitters[i].particles.length;\n    return total;\n  }\n\n  getAllParticles() {\n    let particles = [];\n    let i = this.emitters.length;\n\n    while (i--) particles = particles.concat(this.emitters[i].particles);\n    return particles;\n  }\n\n  destroyAllEmitters() {\n    Util.destroyAll(this.emitters);\n  }\n\n  /**\n   * Destroys everything related to this Proton instance. This includes all emitters, and all properties\n   *\n   * @method destroy\n   * @memberof Proton\n   * @instance\n   */\n  destroy(remove = false) {\n    const destroyOther = () => {\n      this.time = 0;\n      this.then = 0;\n      this.pool.destroy();\n\n      Util.destroyAll(this.emitters);\n      Util.destroyAll(this.renderers, this.getAllParticles());\n    };\n\n    if (remove) {\n      setTimeout(destroyOther, 200);\n    } else {\n      destroyOther();\n    }\n  }\n}\n\nEventDispatcher.bind(Proton);\n","export default class Rgb {\n  constructor(r = 255, g = 255, b = 255) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n  }\n\n  reset() {\n    this.r = 255;\n    this.g = 255;\n    this.b = 255;\n  }\n}\n","import MathUtil from \"./MathUtil\";\n\nexport default {\n  easeLinear(value) {\n    return value;\n  },\n\n  easeInQuad(value) {\n    return Math.pow(value, 2);\n  },\n\n  easeOutQuad(value) {\n    return -(Math.pow(value - 1, 2) - 1);\n  },\n\n  easeInOutQuad(value) {\n    if ((value /= 0.5) < 1) return 0.5 * Math.pow(value, 2);\n\n    return -0.5 * ((value -= 2) * value - 2);\n  },\n\n  easeInCubic(value) {\n    return Math.pow(value, 3);\n  },\n\n  easeOutCubic(value) {\n    return Math.pow(value - 1, 3) + 1;\n  },\n\n  easeInOutCubic(value) {\n    if ((value /= 0.5) < 1) return 0.5 * Math.pow(value, 3);\n\n    return 0.5 * (Math.pow(value - 2, 3) + 2);\n  },\n\n  easeInQuart(value) {\n    return Math.pow(value, 4);\n  },\n\n  easeOutQuart(value) {\n    return -(Math.pow(value - 1, 4) - 1);\n  },\n\n  easeInOutQuart(value) {\n    if ((value /= 0.5) < 1) return 0.5 * Math.pow(value, 4);\n\n    return -0.5 * ((value -= 2) * Math.pow(value, 3) - 2);\n  },\n\n  easeInSine(value) {\n    return -Math.cos(value * MathUtil.PI_2) + 1;\n  },\n\n  easeOutSine(value) {\n    return Math.sin(value * MathUtil.PI_2);\n  },\n\n  easeInOutSine(value) {\n    return -0.5 * (Math.cos(Math.PI * value) - 1);\n  },\n\n  easeInExpo(value) {\n    return value === 0 ? 0 : Math.pow(2, 10 * (value - 1));\n  },\n\n  easeOutExpo(value) {\n    return value === 1 ? 1 : -Math.pow(2, -10 * value) + 1;\n  },\n\n  easeInOutExpo(value) {\n    if (value === 0) return 0;\n\n    if (value === 1) return 1;\n\n    if ((value /= 0.5) < 1) return 0.5 * Math.pow(2, 10 * (value - 1));\n\n    return 0.5 * (-Math.pow(2, -10 * --value) + 2);\n  },\n\n  easeInCirc(value) {\n    return -(Math.sqrt(1 - value * value) - 1);\n  },\n\n  easeOutCirc(value) {\n    return Math.sqrt(1 - Math.pow(value - 1, 2));\n  },\n\n  easeInOutCirc(value) {\n    if ((value /= 0.5) < 1) return -0.5 * (Math.sqrt(1 - value * value) - 1);\n    return 0.5 * (Math.sqrt(1 - (value -= 2) * value) + 1);\n  },\n\n  easeInBack(value) {\n    let s = 1.70158;\n    return value * value * ((s + 1) * value - s);\n  },\n\n  easeOutBack(value) {\n    let s = 1.70158;\n    return (value = value - 1) * value * ((s + 1) * value + s) + 1;\n  },\n\n  easeInOutBack(value) {\n    let s = 1.70158;\n    if ((value /= 0.5) < 1)\n      return 0.5 * (value * value * (((s *= 1.525) + 1) * value - s));\n    return 0.5 * ((value -= 2) * value * (((s *= 1.525) + 1) * value + s) + 2);\n  },\n\n  getEasing(ease) {\n    if (typeof ease === \"function\") return ease;\n    else return this[ease] || this.easeLinear;\n  }\n};\n","import MathUtil from \"../math/MathUtil\";\n\nexport default class Vector2D {\n  constructor(x, y) {\n    this.x = x || 0;\n    this.y = y || 0;\n  }\n\n  set(x, y) {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  setX(x) {\n    this.x = x;\n    return this;\n  }\n\n  setY(y) {\n    this.y = y;\n    return this;\n  }\n\n  getGradient() {\n    if (this.x !== 0) return Math.atan2(this.y, this.x);\n    else if (this.y > 0) return MathUtil.PI_2;\n    else if (this.y < 0) return -MathUtil.PI_2;\n  }\n\n  copy(v) {\n    this.x = v.x;\n    this.y = v.y;\n\n    return this;\n  }\n\n  add(v, w) {\n    if (w !== undefined) {\n      return this.addVectors(v, w);\n    }\n\n    this.x += v.x;\n    this.y += v.y;\n\n    return this;\n  }\n\n  addXY(a, b) {\n    this.x += a;\n    this.y += b;\n\n    return this;\n  }\n\n  addVectors(a, b) {\n    this.x = a.x + b.x;\n    this.y = a.y + b.y;\n\n    return this;\n  }\n\n  sub(v, w) {\n    if (w !== undefined) {\n      return this.subVectors(v, w);\n    }\n\n    this.x -= v.x;\n    this.y -= v.y;\n\n    return this;\n  }\n\n  subVectors(a, b) {\n    this.x = a.x - b.x;\n    this.y = a.y - b.y;\n\n    return this;\n  }\n\n  divideScalar(s) {\n    if (s !== 0) {\n      this.x /= s;\n      this.y /= s;\n    } else {\n      this.set(0, 0);\n    }\n\n    return this;\n  }\n\n  multiplyScalar(s) {\n    this.x *= s;\n    this.y *= s;\n\n    return this;\n  }\n\n  negate() {\n    return this.multiplyScalar(-1);\n  }\n\n  dot(v) {\n    return this.x * v.x + this.y * v.y;\n  }\n\n  lengthSq() {\n    return this.x * this.x + this.y * this.y;\n  }\n\n  length() {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  normalize() {\n    return this.divideScalar(this.length());\n  }\n\n  distanceTo(v) {\n    return Math.sqrt(this.distanceToSquared(v));\n  }\n\n  rotate(tha) {\n    const x = this.x;\n    const y = this.y;\n\n    this.x = x * Math.cos(tha) + y * Math.sin(tha);\n    this.y = -x * Math.sin(tha) + y * Math.cos(tha);\n\n    return this;\n  }\n\n  distanceToSquared(v) {\n    const dx = this.x - v.x;\n    const dy = this.y - v.y;\n\n    return dx * dx + dy * dy;\n  }\n\n  lerp(v, alpha) {\n    this.x += (v.x - this.x) * alpha;\n    this.y += (v.y - this.y) * alpha;\n\n    return this;\n  }\n\n  equals(v) {\n    return v.x === this.x && v.y === this.y;\n  }\n\n  clear() {\n    this.x = 0.0;\n    this.y = 0.0;\n    return this;\n  }\n\n  clone() {\n    return new Vector2D(this.x, this.y);\n  }\n}\n","import Rgb from \"../utils/Rgb\";\nimport Puid from \"../utils/Puid\";\nimport Util from \"../utils/Util\";\nimport ease from \"../math/ease\";\nimport Vector2D from \"../math/Vector2D\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class Particle {\n  /**\n   * the Particle class\n   *\n   * @class Proton.Particle\n   * @constructor\n   * @param {Object} pObj the parameters object;\n   * for example {life:3,dead:false}\n   */\n  constructor(conf) {\n    /**\n     * The particle's id;\n     * @property id\n     * @type {string}\n     */\n    this.name = \"Particle\";\n    this.id = Puid.id(this.name);\n    this.old = {};\n    this.data = {};\n    this.behaviours = [];\n\n    this.p = new Vector2D();\n    this.v = new Vector2D();\n    this.a = new Vector2D();\n    this.old.p = new Vector2D();\n    this.old.v = new Vector2D();\n    this.old.a = new Vector2D();\n\n    this.rgb = new Rgb();\n    this.reset();\n    conf && Util.setProp(this, conf);\n  }\n\n  getDirection() {\n    return Math.atan2(this.v.x, -this.v.y) * MathUtil.N180_PI;\n  }\n\n  reset() {\n    this.life = Infinity;\n    this.age = 0;\n\n    this.dead = false;\n    this.sleep = false;\n    this.body = null;\n    this.sprite = null;\n    this.parent = null;\n\n    this.energy = 1; // Energy Loss\n    this.mass = 1;\n    this.radius = 10;\n    this.alpha = 1;\n    this.scale = 1;\n    this.rotation = 0;\n    this.color = null;\n\n    this.p.set(0, 0);\n    this.v.set(0, 0);\n    this.a.set(0, 0);\n    this.old.p.set(0, 0);\n    this.old.v.set(0, 0);\n    this.old.a.set(0, 0);\n    this.easing = ease.easeLinear;\n\n    this.rgb.reset();\n    Util.emptyObject(this.data);\n    this.removeAllBehaviours();\n\n    return this;\n  }\n\n  update(time, index) {\n    if (!this.sleep) {\n      this.age += time;\n      this.applyBehaviours(time, index);\n    }\n\n    if (this.age < this.life) {\n      const scale = this.easing(this.age / this.life);\n      this.energy = Math.max(1 - scale, 0);\n    } else {\n      this.destroy();\n    }\n  }\n\n  applyBehaviours(time, index) {\n    const length = this.behaviours.length;\n    let i;\n\n    for (i = 0; i < length; i++) {\n      this.behaviours[i] &&\n        this.behaviours[i].applyBehaviour(this, time, index);\n    }\n  }\n\n  addBehaviour(behaviour) {\n    this.behaviours.push(behaviour);\n\n    if (behaviour.hasOwnProperty(\"parents\")) behaviour.parents.push(this);\n    behaviour.initialize(this);\n  }\n\n  addBehaviours(behaviours) {\n    const length = behaviours.length;\n    let i;\n\n    for (i = 0; i < length; i++) {\n      this.addBehaviour(behaviours[i]);\n    }\n  }\n\n  removeBehaviour(behaviour) {\n    const index = this.behaviours.indexOf(behaviour);\n\n    if (index > -1) {\n      const behaviour = this.behaviours.splice(index, 1);\n      behaviour.parents = null;\n    }\n  }\n\n  removeAllBehaviours() {\n    Util.emptyArray(this.behaviours);\n  }\n\n  /**\n   * Destory this particle\n   * @method destroy\n   */\n  destroy() {\n    this.removeAllBehaviours();\n    this.energy = 0;\n    this.dead = true;\n    this.parent = null;\n  }\n}\n","export default {\n  /**\n   * @typedef  {Object} rgbObject\n   * @property {Number} r red value\n   * @property {Number} g green value\n   * @property {Number} b blue value\n   */\n  /**\n   * converts a hex value to a rgb object\n   *\n   * @memberof Proton#Proton.Util\n   * @method hexToRgb\n   *\n   * @param {String} h any hex value, e.g. #000000 or 000000 for black\n   *\n   * @return {rgbObject}\n   */\n  hexToRgb(h) {\n    const hex16 = h.charAt(0) === \"#\" ? h.substring(1, 7) : h;\n    const r = parseInt(hex16.substring(0, 2), 16);\n    const g = parseInt(hex16.substring(2, 4), 16);\n    const b = parseInt(hex16.substring(4, 6), 16);\n\n    return { r, g, b };\n  },\n\n  /**\n   * converts a rgb value to a rgb string\n   *\n   * @memberof Proton#Proton.Util\n   * @method rgbToHex\n   *\n   * @param {Object | Proton.hexToRgb} rgb a rgb object like in {@link Proton#Proton.}\n   *\n   * @return {String} rgb()\n   */\n  rgbToHex(rbg) {\n    return `rgb(${rbg.r}, ${rbg.g}, ${rbg.b})`;\n  },\n\n  getHex16FromParticle(p) {\n    return Number(p.rgb.r) * 65536 + Number(p.rgb.g) * 256 + Number(p.rgb.b);\n  }\n};\n","import Vector2D from \"./Vector2D\";\n\nexport default class Polar2D {\n  constructor(r, tha) {\n    this.r = Math.abs(r) || 0;\n    this.tha = tha || 0;\n  }\n\n  set(r, tha) {\n    this.r = r;\n    this.tha = tha;\n    return this;\n  }\n\n  setR(r) {\n    this.r = r;\n    return this;\n  }\n\n  setTha(tha) {\n    this.tha = tha;\n    return this;\n  }\n\n  copy(p) {\n    this.r = p.r;\n    this.tha = p.tha;\n    return this;\n  }\n\n  toVector() {\n    return new Vector2D(this.getX(), this.getY());\n  }\n\n  getX() {\n    return this.r * Math.sin(this.tha);\n  }\n\n  getY() {\n    return -this.r * Math.cos(this.tha);\n  }\n\n  normalize() {\n    this.r = 1;\n    return this;\n  }\n\n  equals(v) {\n    return v.r === this.r && v.tha === this.tha;\n  }\n\n  clear() {\n    this.r = 0.0;\n    this.tha = 0.0;\n    return this;\n  }\n\n  clone() {\n    return new Polar2D(this.r, this.tha);\n  }\n}\n","const Mat3 = {\n  create(mat3) {\n    const mat = new Float32Array(9);\n    if (mat3) this.set(mat3, mat);\n\n    return mat;\n  },\n\n  set(mat1, mat2) {\n    for (let i = 0; i < 9; i++) mat2[i] = mat1[i];\n\n    return mat2;\n  },\n\n  multiply(mat, mat2, mat3) {\n    let a00 = mat[0],\n      a01 = mat[1],\n      a02 = mat[2],\n      a10 = mat[3],\n      a11 = mat[4],\n      a20 = mat[6],\n      a21 = mat[7],\n      b00 = mat2[0],\n      b01 = mat2[1],\n      b02 = mat2[2],\n      b10 = mat2[3],\n      b11 = mat2[4],\n      b20 = mat2[6],\n      b21 = mat2[7];\n\n    mat3[0] = b00 * a00 + b01 * a10;\n    mat3[1] = b00 * a01 + b01 * a11;\n    mat3[2] = a02 * b02;\n    mat3[3] = b10 * a00 + b11 * a10;\n    mat3[4] = b10 * a01 + b11 * a11;\n    mat3[6] = b20 * a00 + b21 * a10 + a20;\n    mat3[7] = b20 * a01 + b21 * a11 + a21;\n\n    return mat3;\n  },\n\n  inverse(mat, mat3) {\n    let a00 = mat[0],\n      a01 = mat[1],\n      a10 = mat[3],\n      a11 = mat[4],\n      a20 = mat[6],\n      a21 = mat[7],\n      b01 = a11,\n      b11 = -a10,\n      b21 = a21 * a10 - a11 * a20,\n      d = a00 * b01 + a01 * b11,\n      id;\n\n    id = 1 / d;\n    mat3[0] = b01 * id;\n    mat3[1] = -a01 * id;\n    mat3[3] = b11 * id;\n    mat3[4] = a00 * id;\n    mat3[6] = b21 * id;\n    mat3[7] = (-a21 * a00 + a01 * a20) * id;\n\n    return mat3;\n  },\n\n  multiplyVec2(m, vec, mat3) {\n    let x = vec[0],\n      y = vec[1];\n\n    mat3[0] = x * m[0] + y * m[3] + m[6];\n    mat3[1] = x * m[1] + y * m[4] + m[7];\n\n    return mat3;\n  }\n};\n\nexport default Mat3;\n","import Span from \"./Span\";\nimport Util from \"../utils/Util\";\nimport MathUtil from \"./MathUtil\";\n\nexport default class ArraySpan extends Span {\n  constructor(color) {\n    super();\n    this._arr = Util.toArray(color);\n  }\n\n  getValue() {\n    const val = Util.getRandFromArray(this._arr);\n    return val === \"random\" || val === \"Random\" ? MathUtil.randomColor() : val;\n  }\n\n  /**\n   * Make sure that the color is an instance of Proton.ArraySpan, if not it makes a new instance\n   *\n   * @method setSpanValue\n   * @memberof Proton#Proton.Color\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} the integrate time 1/ms\n   * @param {Int} the particle index\n   */\n  static createArraySpan(arr) {\n    if (!arr) return null;\n\n    if (arr instanceof ArraySpan) return arr;\n    else return new ArraySpan(arr);\n  }\n}\n","export default class Rectangle {\n  constructor(x, y, w, h) {\n    this.x = x;\n    this.y = y;\n\n    this.width = w;\n    this.height = h;\n\n    this.bottom = this.y + this.height;\n    this.right = this.x + this.width;\n  }\n\n  contains(x, y) {\n    if (x <= this.right && x >= this.x && y <= this.bottom && y >= this.y)\n      return true;\n    else return false;\n  }\n}\n","import Span from \"../math/Span\";\nimport Util from \"../utils/Util\";\n\nexport default class Rate {\n  /**\n   * The number of particles per second emission (a [particle]/b [s]);\n   * @namespace\n   * @memberof! Proton#\n   * @constructor\n   * @alias Rate\n   *\n   * @param {Array | Number | Span} numpan the number of each emission;\n   * @param {Array | Number | Span} timepan the time of each emission;\n   * for example: new Rate(new Span(10, 20), new Span(.1, .25));\n   */\n  constructor(numpan, timepan) {\n    this.numPan = Span.setSpanValue(Util.initValue(numpan, 1));\n    this.timePan = Span.setSpanValue(Util.initValue(timepan, 1));\n\n    this.startTime = 0;\n    this.nextTime = 0;\n    this.init();\n  }\n\n  init() {\n    this.startTime = 0;\n    this.nextTime = this.timePan.getValue();\n  }\n\n  getValue(time) {\n    this.startTime += time;\n\n    if (this.startTime >= this.nextTime) {\n      this.startTime = 0;\n      this.nextTime = this.timePan.getValue();\n\n      if (this.numPan.b === 1) {\n        if (this.numPan.getValue(false) > 0.5) return 1;\n        else return 0;\n      } else {\n        return this.numPan.getValue(true);\n      }\n    }\n\n    return 0;\n  }\n}\n","export default class Initialize {\n  reset() {}\n\n  init(emitter, particle) {\n    if (particle) {\n      this.initialize(particle);\n    } else {\n      this.initialize(emitter);\n    }\n  }\n\n  // sub class init\n  initialize(target) {}\n}\n","import Span from \"../math/Span\";\nimport Initialize from \"./Initialize\";\n\nexport default class Life extends Initialize {\n  constructor(a, b, c) {\n    super();\n\n    this.lifePan = Span.setSpanValue(a, b, c);\n    this.name = \"Life\";\n  }\n\n  initialize(target) {\n    if (this.lifePan.a === Infinity) target.life = Infinity;\n    else target.life = this.lifePan.getValue();\n  }\n}\n","import Vector2D from \"../math/Vector2D\";\n\nexport default class Zone {\n  constructor() {\n    this.vector = new Vector2D(0, 0);\n    this.random = 0;\n    this.crossType = \"dead\";\n    this.alert = true;\n  }\n\n  getPosition() {}\n\n  crossing(particle) {}\n}\n","import Zone from \"./Zone\";\n\nexport default class PointZone extends Zone {\n  constructor(x, y) {\n    super();\n\n    this.x = x;\n    this.y = y;\n  }\n\n  getPosition() {\n    this.vector.x = this.x;\n    this.vector.y = this.y;\n\n    return this.vector;\n  }\n\n  crossing(particle) {\n    if (this.alert) {\n      console.error(\"Sorry, PointZone does not support crossing method!\");\n      this.alert = false;\n    }\n  }\n}\n","import Util from \"../utils/Util\";\nimport PointZone from \"../zone/PointZone\";\nimport Initialize from \"./Initialize\";\n\nexport default class Position extends Initialize {\n  constructor(zone) {\n    super();\n    this.zone = Util.initValue(zone, new PointZone());\n    this.name = \"Position\";\n  }\n\n  reset(zone) {\n    this.zone = Util.initValue(zone, new PointZone());\n  }\n\n  initialize(target) {\n    this.zone.getPosition();\n\n    target.p.x = this.zone.vector.x;\n    target.p.y = this.zone.vector.y;\n  }\n}\n","import Proton from \"../core/Proton\";\nimport Span from \"../math/Span\";\nimport Util from \"../utils/Util\";\nimport Initialize from \"./Initialize\";\nimport Polar2D from \"../math/Polar2D\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class Velocity extends Initialize {\n  constructor(rpan, thapan, type) {\n    super();\n\n    this.rPan = Span.setSpanValue(rpan);\n    this.thaPan = Span.setSpanValue(thapan);\n    this.type = Util.initValue(type, \"vector\");\n\n    this.name = \"Velocity\";\n  }\n\n  reset(rpan, thapan, type) {\n    this.rPan = Span.setSpanValue(rpan);\n    this.thaPan = Span.setSpanValue(thapan);\n    this.type = Util.initValue(type, \"vector\");\n  }\n\n  normalizeVelocity(vr) {\n    return vr * Proton.MEASURE;\n  }\n\n  initialize(target) {\n    if (this.type === \"p\" || this.type === \"P\" || this.type === \"polar\") {\n      const polar2d = new Polar2D(\n        this.normalizeVelocity(this.rPan.getValue()),\n        this.thaPan.getValue() * MathUtil.PI_180\n      );\n\n      target.v.x = polar2d.getX();\n      target.v.y = polar2d.getY();\n    } else {\n      target.v.x = this.normalizeVelocity(this.rPan.getValue());\n      target.v.y = this.normalizeVelocity(this.thaPan.getValue());\n    }\n  }\n}\n","import Span from \"../math/Span\";\nimport Initialize from \"./Initialize\";\n\nexport default class Mass extends Initialize {\n  constructor(a, b, c) {\n    super();\n    this.massPan = Span.setSpanValue(a, b, c);\n    this.name = \"Mass\";\n  }\n\n  initialize(target) {\n    target.mass = this.massPan.getValue();\n  }\n}\n","import Span from \"../math/Span\";\nimport Initialize from \"./Initialize\";\n\nexport default class Radius extends Initialize {\n  constructor(a, b, c) {\n    super();\n    this.radius = Span.setSpanValue(a, b, c);\n\n    this.name = \"Radius\";\n  }\n\n  reset(a, b, c) {\n    this.radius = Span.setSpanValue(a, b, c);\n  }\n\n  initialize(particle) {\n    particle.radius = this.radius.getValue();\n    particle.data.oldRadius = particle.radius;\n  }\n}\n","import Util from \"../utils/Util\";\nimport ArraySpan from \"../math/ArraySpan\";\nimport Initialize from \"./Initialize\";\n\nexport default class Body extends Initialize {\n  constructor(image, w, h) {\n    super();\n\n    this.image = this.setSpanValue(image);\n    this.w = Util.initValue(w, 20);\n    this.h = Util.initValue(h, this.w);\n    this.name = \"Body\";\n  }\n\n  initialize(particle) {\n    const imageTarget = this.image.getValue();\n\n    if (typeof imageTarget === \"string\") {\n      particle.body = {\n        width: this.w,\n        height: this.h,\n        src: imageTarget,\n        isInner: true,\n        inner: true\n      };\n    } else {\n      particle.body = imageTarget;\n    }\n  }\n\n  setSpanValue(image) {\n    return image instanceof ArraySpan ? image : new ArraySpan(image);\n  }\n}\n","import Proton from '../core/Proton';\nimport Util from '../utils/Util';\nimport ease from '../math/ease';\n\nexport default class Behaviour {\n    static id = 0;\n\n    /**\n     * The Behaviour class is the base for the other Behaviour\n     *\n     * @memberof! -\n     * @interface\n     * @alias Proton.Behaviour\n     *\n     * @param {Number} life \tthe behaviours life\n     * @param {String} easing \tThe behaviour's decaying trend, for example ease.easeOutQuart\n     *\n     * @property {String}  id \t\tThe behaviours id\n     * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n     * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n     * @property {Number}  age=0 \tHow long the particle should be 'alife'\n     * @property {Number}  energy=1\n     * @property {Boolean} dead=false The particle is dead at first\n     * @property {Array}   parents \tThe behaviour's parents array\n     * @property {String}  name \tThe behaviour name\n     */\n    constructor(life, easing) {\n\n        this.life = Util.initValue(life, Infinity);\n        this.easing = ease.getEasing(easing);\n\n        this.age = 0;\n        this.energy = 1;\n        this.dead = false;\n        this.parents = [];\n\n        this.id = `Behaviour_${Behaviour.id++}`;\n        this.name = 'Behaviour';\n    }\n\n    /**\n     * Reset this behaviour's parameters\n     *\n     * @method reset\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Number} [life=Infinity] \t\tthis behaviour's life\n     * @param {String} [easing=easeLinear] \tthis behaviour's easing\n     */\n    reset(life, easing) {\n        this.life = Util.initValue(life, Infinity);\n        this.easing = ease.getEasing(easing);\n    }\n\n    /**\n     * Normalize a force by 1:100;\n     *\n     * @method normalizeForce\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Proton.Vector2D} force\n     */\n    normalizeForce(force) {\n        return force.multiplyScalar(Proton.MEASURE);\n    }\n\n    /**\n     * Normalize a value by 1:100;\n     *\n     * @method normalizeValue\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Number} value\n     */\n    normalizeValue(value) {\n        return value * Proton.MEASURE;\n    }\n\n    /**\n     * Initialize the behaviour's parameters for all particles\n     *\n     * @method initialize\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Proton.Particle} particle\n     */\n    initialize(particle) {}\n\n    /**\n     * Apply this behaviour for all particles every time\n     *\n     * @method applyBehaviour\n     * @memberof Proton.Behaviour\n     * @instance\n     *\n     * @param {Proton.Particle} particle\n     * @param {Number} \t\t\ttime the integrate time 1/ms\n     * @param {Int} \t\t\tindex the particle index\n     */\n    calculate(particle, time, index) {\n        this.age += time;\n\n        if (this.age >= this.life || this.dead) {\n            this.energy = 0;\n            this.dead = true;\n            this.destroy();\n        } else {\n            const scale = this.easing(particle.age / particle.life);\n            this.energy = Math.max(1 - scale, 0);\n        }\n    }\n\n    /**\n     * Destory this behaviour\n     *\n     * @method destroy\n     * @memberof Proton.Behaviour\n     * @instance\n     */\n    destroy() {\n        let i = this.parents.length;\n        while (i--) {\n            this.parents[i].removeBehaviour(this);\n        }\n\n        this.parents.length = 0;\n    }\n}\n","import Vector2D from '../math/Vector2D';\nimport Behaviour from './Behaviour';\n\nexport default class Force extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Force\n\t *\n\t * @param {Number} fx\n\t * @param {Number} fy\n\t * @param {Number} [life=Infinity] \t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(fx, fy, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.force = this.normalizeForce(new Vector2D(fx, fy));\n\t\tthis.name = 'Force';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Force\n\t * @instance\n\t *\n\t * @param {Number} fx\n\t * @param {Number} fy\n\t * @param {Number} [life=Infinity] \t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(fx, fy, life, easing) {\n\t\tthis.force = this.normalizeForce(new Vector2D(fx, fy));\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @method applyBehaviour\n\t * @memberof Proton#Proton.Force\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} the integrate time 1/ms\n\t * @param {Int} the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.calculate(particle, time, index);\n\t\tparticle.a.add(this.force);\n\t}\n}","import Util from \"../utils/Util\";\nimport Vector2D from \"../math/Vector2D\";\nimport Behaviour from \"./Behaviour\";\n\nexport default class Attraction extends Behaviour {\n  /**\n   * This behaviour let the particles follow one specific Proton.Vector2D\n   *\n   * @memberof! Proton#\n   * @augments Proton.Behaviour\n   * @constructor\n   * @alias Proton.Attraction\n   *\n   * @todo add description for 'force' and 'radius'\n   *\n   * @param {Proton.Vector2D} targetPosition the attraction point coordinates\n   * @param {Number} [force=100]\n   * @param {Number} [radius=1000]\n   * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   *\n   * @property {Proton.Vector2D} targetPosition\n   * @property {Number} radius\n   * @property {Number} force\n   * @property {Number} radiusSq\n   * @property {Proton.Vector2D} attractionForce\n   * @property {Number} lengthSq\n   * @property {String} name The Behaviour name\n   */\n  constructor(targetPosition, force, radius, life, easing) {\n    super(life, easing);\n\n    this.targetPosition = Util.initValue(targetPosition, new Vector2D());\n    this.radius = Util.initValue(radius, 1000);\n    this.force = Util.initValue(this.normalizeValue(force), 100);\n\n    this.radiusSq = this.radius * this.radius;\n    this.attractionForce = new Vector2D();\n    this.lengthSq = 0;\n\n    this.name = \"Attraction\";\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#Proton.Attraction\n   * @instance\n   *\n   * @todo add description for 'force' and 'radius'\n   *\n   * @param {Proton.Vector2D} targetPosition the attraction point coordinates\n   * @param {Number} [force=100]\n   * @param {Number} [radius=1000]\n   * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   */\n  reset(targetPosition, force, radius, life, easing) {\n    this.targetPosition = Util.initValue(targetPosition, new Vector2D());\n    this.radius = Util.initValue(radius, 1000);\n    this.force = Util.initValue(this.normalizeValue(force), 100);\n\n    this.radiusSq = this.radius * this.radius;\n    this.attractionForce = new Vector2D();\n    this.lengthSq = 0;\n\n    life && super.reset(life, easing);\n  }\n\n  /**\n   * Apply this behaviour for all particles every time\n   *\n   * @memberof Proton#Proton.Attraction\n   * @method applyBehaviour\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} \t\t\ttime the integrate time 1/ms\n   * @param {Int} \t\t\tindex the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    this.calculate(particle, time, index);\n\n    this.attractionForce.copy(this.targetPosition);\n    this.attractionForce.sub(particle.p);\n    this.lengthSq = this.attractionForce.lengthSq();\n\n    if (this.lengthSq > 0.00004 && this.lengthSq < this.radiusSq) {\n      this.attractionForce.normalize();\n      this.attractionForce.multiplyScalar(1 - this.lengthSq / this.radiusSq);\n      this.attractionForce.multiplyScalar(this.force);\n\n      particle.a.add(this.attractionForce);\n    }\n  }\n}\n","import Vector2D from \"../math/Vector2D\";\nimport MathUtil from \"../math/MathUtil\";\nimport Behaviour from \"./Behaviour\";\n\nexport default class RandomDrift extends Behaviour {\n  /**\n   * @memberof! Proton#\n   * @augments Behaviour\n   * @constructor\n   * @alias RandomDrift\n   *\n   * @param {Number} driftX \t\t\t\tX value of the new Vector2D\n   * @param {Number} driftY  \t\t\t\tY value of the new Vector2D\n   * @param {Number} delay \t\t\t\tHow much delay the drift should have\n   * @param {Number} [life=Infinity] \t\tthis behaviour's life\n   * @param {String} [easing=easeLinear] \tthis behaviour's easing\n   *\n   * @property {Number} time The time of the drift\n   * @property {String} name The Behaviour name\n   */\n  constructor(driftX, driftY, delay, life, easing) {\n    super(life, easing);\n\n    this.reset(driftX, driftY, delay);\n    this.time = 0;\n    this.name = \"RandomDrift\";\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#RandomDrift\n   * @instance\n   *\n   * @param {Number} driftX \t\t\t\tX value of the new Vector2D\n   * @param {Number} driftY  \t\t\t\tY value of the new Vector2D\n   * @param {Number} delay \t\t\t\tHow much delay the drift should have\n   * @param {Number} [life=Infinity] \t\tthis behaviour's life\n   * @param {String} [easing=easeLinear] \tthis behaviour's easing\n   */\n  reset(driftX, driftY, delay, life, easing) {\n    this.panFoce = new Vector2D(driftX, driftY);\n    this.panFoce = this.normalizeForce(this.panFoce);\n    this.delay = delay;\n\n    life && super.reset(life, easing);\n  }\n\n  initialize(particle) {\n    particle.data.time = 0;\n  }\n\n  /**\n   * Apply this behaviour for all particles every time\n   *\n   * @method applyBehaviour\n   * @memberof Proton#RandomDrift\n   * @instance\n   *\n   * @param {Particle} particle\n   * @param {Number} \t\t\ttime the integrate time 1/ms\n   * @param {Int} \t\t\tindex the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    this.calculate(particle, time, index);\n    particle.data.time += time;\n\n    if (particle.data.time >= this.delay) {\n      particle.a.addXY(\n        MathUtil.randomAToB(-this.panFoce.x, this.panFoce.x),\n        MathUtil.randomAToB(-this.panFoce.y, this.panFoce.y)\n      );\n\n      particle.data.time = 0;\n    }\n  }\n}\n","import Force from './Force';\n\nexport default class Gravity extends Force {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton#Proton.Force\n\t * @constructor\n\t * @alias Proton.Gravity\n\t *\n\t * @param {Number} g \t\t\t\t\t\t\tGravity\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(g, life, easing) {\n\t\tsuper(0, g, life, easing);\n\t\tthis.name = 'Gravity';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Gravity\n\t * @instance\n\t *\n\t * @param {Number} g \t\t\t\t\t\t\tGravity\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(g, life, easing) {\n\t\tsuper.reset(0, g, life, easing);\n\t}\n}","import Util from '../utils/Util';\nimport Vector2D from '../math/Vector2D';\nimport Behaviour from './Behaviour';\n\nexport default class Collision extends Behaviour {\n\n\t/**\n\t * The callback after collision\n\t *\n\t * @callback Callback\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Proton.Paritcle} otherParticle\n\t */\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Collision\n\t *\n\t * @todo add description to mass\n\t *\n\t * @param {Proton.Emitter} \t[emitter=null] \t\tthe attraction point coordinates\n\t * @param {Boolean} \t\t[mass=true]\n\t * @param {Callback}\t \t[callback=null]\t\tthe callback after the collision\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(emitter, mass, callback, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.reset(emitter, mass, callback);\n\t\tthis.name = 'Collision';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @memberof Proton#Proton.Collision\n\t * @method reset\n\t * @instance\n\t *\n\t * @todo add description to mass\n\t *\n\t * @param {Proton.Emitter} \t[emitter=null] \t\tthe attraction point coordinates\n\t * @param {Boolean} \t\t[mass=true]\n\t * @param {Callback}\t \t[callback=null]\t\tthe callback after the collision\n\t * @param {Number} \t\t\t[life=Infinity] \tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(emitter, mass, callback, life, easing) {\n\t\tthis.emitter = Util.initValue(emitter, null);\n\t\tthis.mass = Util.initValue(mass, true);\n\t\tthis.callback = Util.initValue(callback, null);\n\n\t\tthis.collisionPool = [];\n\t\tthis.delta = new Vector2D();\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @memberof Proton#Proton.Collision\n\t * @method applyBehaviour\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} \t\t\ttime the integrate time 1/ms\n\t * @param {Int} \t\t\tindex the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tconst newPool = this.emitter ? this.emitter.particles.slice(index) : this.pool.slice(index);\n\t\tconst length = newPool.length;\n\n\t\tlet otherParticle;\n\t\tlet lengthSq;\n\t\tlet overlap;\n\t\tlet totalMass;\n\t\tlet averageMass1, averageMass2;\n\t\tlet i;\n\n\t\tfor (i = 0; i < length; i++) {\n\t\t\totherParticle = newPool[i];\n\n\t\t\tif (otherParticle !== particle) {\n\t\t\t\tthis.delta.copy(otherParticle.p);\n\t\t\t\tthis.delta.sub(particle.p);\n\n\t\t\t\tlengthSq = this.delta.lengthSq();\n\t\t\t\tconst distance = particle.radius + otherParticle.radius;\n\n\t\t\t\tif (lengthSq <= distance * distance) {\n\t\t\t\t\toverlap = distance - Math.sqrt(lengthSq);\n\t\t\t\t\toverlap += 0.5;\n\n\t\t\t\t\ttotalMass = particle.mass + otherParticle.mass;\n\t\t\t\t\taverageMass1 = this.mass ? otherParticle.mass / totalMass : 0.5;\n\t\t\t\t\taverageMass2 = this.mass ? particle.mass / totalMass : 0.5;\n\n\t\t\t\t\tparticle.p.add(this.delta.clone().normalize().multiplyScalar(overlap * -averageMass1));\n\t\t\t\t\totherParticle.p.add(this.delta.normalize().multiplyScalar(overlap * averageMass2));\n\n\t\t\t\t\tthis.callback && this.callback(particle, otherParticle);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}","import Util from '../utils/Util';\nimport Behaviour from './Behaviour';\n\nexport default class CrossZone extends Behaviour {\n\n    /**\n     * Defines what happens if the particles come to the end of the specified zone\n     *\n     * @memberof! Proton#\n     * @augments Proton.Behaviour\n     * @constructor\n     * @alias Proton.CrossZone\n     *\n     * @param {Proton.Zone} zone \t\t\t\t\t\tcan be any Proton.Zone - e.g. Proton.RectZone()\n     * @param {String} \t\t[crossType=dead] \t\t\twhat happens if the particles pass the zone - allowed strings: dead | bound | cross\n     * @param {Number} \t\t[life=Infinity] \t\t\tthis behaviour's life\n     * @param {String} \t\t[easing=ease.easeLinear] \tthis behaviour's easing\n     *\n     * @property {String} name The Behaviour name\n     */\n    constructor(zone, crossType, life, easing) {\n        super(life, easing);\n\n        this.reset(zone, crossType);\n        this.name = 'CrossZone';\n    }\n\n    /**\n     * Reset this behaviour's parameters\n     *\n     * @method reset\n     * @memberof Proton#Proton.CrossZone\n     * @instance\n     *\n     * @param {Proton.Zone} zone \t\t\t\tcan be any Proton.Zone - e.g. Proton.RectZone()\n     * @param {String} \t\t[crossType=dead] \twhat happens if the particles pass the zone - allowed strings: dead | bound | cross\n     * @param {Number} \t\t[life=Infinity] \tthis behaviour's life\n     * @param {String} \t\t[easing=easeLinear]\tthis behaviour's easing\n     */\n    reset(zone, crossType, life, easing) {\n        this.zone = zone;\n        this.zone.crossType = Util.initValue(crossType, 'dead');\n\n        life && super.reset(life, easing);\n    }\n\n    /**\n     * Apply this behaviour for all particles every time\n     *\n     * @method applyBehaviour\n     * @memberof Proton#Proton.CrossZone\n     * @instance\n     *\n     * @param {Proton.Particle} particle\n     * @param {Number} the integrate time 1/ms\n     * @param {Int} the particle index\n     */\n    applyBehaviour(particle, time, index) {\n        this.calculate(particle, time, index);\n        this.zone.crossing(particle);\n    };\n}","import Util from \"../utils/Util\";\nimport Span from \"../math/Span\";\nimport Behaviour from \"./Behaviour\";\n\nexport default class Alpha extends Behaviour {\n  /**\n   * @memberof! Proton#\n   * @augments Proton.Behaviour\n   * @constructor\n   * @alias Proton.Alpha\n   *\n   * @todo add description for 'a' and 'b'\n   *\n   * @param {Number} a\n   * @param {String} b\n   * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   *\n   * @property {String} name The Behaviour name\n   */\n  constructor(a, b, life, easing) {\n    super(life, easing);\n\n    this.reset(a, b);\n    this.name = \"Alpha\";\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#Proton.Alpha\n   * @instance\n   *\n   * @todo add description for 'a' and 'b'\n   *\n   * @param {Number} a\n   * @param {String} b\n   * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   */\n  reset(a, b, life, easing) {\n    this.same = b === null || b === undefined ? true : false;\n    this.a = Span.setSpanValue(Util.initValue(a, 1));\n    this.b = Span.setSpanValue(b);\n\n    life && super.reset(life, easing);\n  }\n\n  /**\n   * Sets the new alpha value of the particle\n   *\n   * @method initialize\n   * @memberof Proton#Proton.Alpha\n   * @instance\n   *\n   * @param {Proton.Particle} particle A single Proton generated particle\n   */\n  initialize(particle) {\n    particle.data.alphaA = this.a.getValue();\n\n    if (this.same) particle.data.alphaB = particle.data.alphaA;\n    else particle.data.alphaB = this.b.getValue();\n  }\n\n  /**\n   * @method applyBehaviour\n   * @memberof Proton#Proton.Alpha\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} \t\t\ttime the integrate time 1/ms\n   * @param {Int} \t\t\tindex the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    this.calculate(particle, time, index);\n\n    particle.alpha =\n      particle.data.alphaB +\n      (particle.data.alphaA - particle.data.alphaB) * this.energy;\n\n    if (particle.alpha < 0.001) particle.alpha = 0;\n  }\n}\n","import Span from \"../math/Span\";\nimport Util from '../utils/Util';\nimport Behaviour from './Behaviour';\n\nexport default class Scale extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Scale\n\t *\n\t * @todo add description for 'a' and 'b'\n\t *\n\t * @param {Number} a\n\t * @param {String} b\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(a, b, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.reset(a, b);\n\t\tthis.name = 'Scale';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Scale\n\t * @instance\n\t *\n\t * @param {Number} a\n\t * @param {String} b\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(a, b, life, easing) {\n\t\tthis.same = b === null || b === undefined ? true : false;\n\t\tthis.a = Span.setSpanValue(Util.initValue(a, 1));\n\t\tthis.b = Span.setSpanValue(b);\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Initialize the behaviour's parameters for all particles\n\t *\n\t * @method initialize\n\t * @memberof Proton#Proton.Scale\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t */\n\tinitialize(particle) {\n\t\tparticle.data.scaleA = this.a.getValue();\n\t\tparticle.data.oldRadius = particle.radius;\n\t\tparticle.data.scaleB = this.same ? particle.data.scaleA : this.b.getValue();\n\t};\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @method applyBehaviour\n\t * @memberof Proton#Proton.Scale\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} \t\t\ttime the integrate time 1/ms\n\t * @param {Int} \t\t\tindex the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.calculate(particle, time, index);\n\t\tparticle.scale = particle.data.scaleB + (particle.data.scaleA - particle.data.scaleB) * this.energy;\n\n\t\tif (particle.scale < 0.0001) particle.scale = 0;\n\t\tparticle.radius = particle.data.oldRadius * particle.scale;\n\t}\n}","import Span from \"../math/Span\";\nimport Util from '../utils/Util';\nimport Behaviour from './Behaviour';\n\nexport default class Rotate extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Proton.Behaviour\n\t * @constructor\n\t * @alias Proton.Rotate\n\t *\n\t * @todo add description for 'a', 'b' and 'style'\n\t *\n\t * @param {String} [influence=Velocity] The rotation's influence\n\t * @param {String} b\n\t * @param {String} [style=to]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(influence, b, style, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.reset(influence, b, style);\n\t\tthis.name = 'Rotate';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Rotate\n\t * @instance\n\t *\n\t * @todo add description for 'a', 'b' and 'style'\n\t *\n\t * @param {String} a\n\t * @param {String} b\n\t * @param {String} [style=to]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(a, b, style, life, easing) {\n\t\tthis.same = b === null || b === undefined ? true : false;\n\n\t\tthis.a = Span.setSpanValue(Util.initValue(a, 'Velocity'));\n\t\tthis.b = Span.setSpanValue(Util.initValue(b, 0));\n\t\tthis.style = Util.initValue(style, 'to');\n\n\t\tlife && super.reset(life, easing);\n\t}\n\n\t/**\n\t * Initialize the behaviour's parameters for all particles\n\t *\n\t * @method initialize\n\t * @memberof Proton#Proton.Rotate\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t */\n\tinitialize(particle) {\n\t\tparticle.rotation = this.a.getValue();\n\t\tparticle.data.rotationA = this.a.getValue();\n\n\t\tif (!this.same) particle.data.rotationB = this.b.getValue();\n\t};\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @method applyBehaviour\n\t * @memberof Proton#Proton.Rotate\n\t * @instance\n\t *\n\t * @param {Proton.Particle} particle\n\t * @param {Number} \t\t\ttime the integrate time 1/ms\n\t * @param {Int} \t\t\tindex the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.calculate(particle, time, index);\n\n\t\tif (!this.same) {\n\t\t\tif (this.style === 'to' || this.style === 'TO' || this.style === '_') {\n\t\t\t\tparticle.rotation += particle.data.rotationB + (particle.data.rotationA - particle.data.rotationB) * this.energy\n\t\t\t} else {\n\t\t\t\tparticle.rotation += particle.data.rotationB;\n\t\t\t}\n\t\t} else if (this.a.a === 'V' || this.a.a === 'Velocity' || this.a.a === 'v') {\n\t\t\t// beta...\n\t\t\tparticle.rotation = particle.getDirection();\n\t\t}\n\t}\n\n}\n","import ColorUtil from \"../utils/ColorUtil\";\nimport ArraySpan from \"../math/ArraySpan\";\nimport Behaviour from \"./Behaviour\";\n\nexport default class Color extends Behaviour {\n  /**\n   * @memberof! Proton#\n   * @augments Proton.Behaviour\n   * @constructor\n   * @alias Proton.Color\n   *\n   * @param {Proton.ArraySpan | String} a the string should be a hex e.g. #000000 for black\n   * @param {Proton.ArraySpan | String} b the string should be a hex e.g. #000000 for black\n   * @param {Number} [life=Infinity] \tthis behaviour's life\n   * @param {String} [easing=easeLinear] \tthis behaviour's easing\n   *\n   * @property {String} name The Behaviour name\n   */\n  constructor(a, b, life, easing) {\n    super(life, easing);\n\n    this.reset(a, b);\n    this.name = \"Color\";\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#Proton.Color\n   * @instance\n   *\n   * @param {Proton.ArraySpan | String} a the string should be a hex e.g. #000000 for black\n   * @param {Proton.ArraySpan | String} b the string should be a hex e.g. #000000 for black\n   * @param {Number} [life=Infinity] \tthis behaviour's life\n   * @param {String} [easing=easeLinear] \tthis behaviour's easing\n   */\n  reset(a, b, life, easing) {\n    this.a = ArraySpan.createArraySpan(a);\n    this.b = ArraySpan.createArraySpan(b);\n    life && super.reset(life, easing);\n  }\n\n  /**\n   * Initialize the behaviour's parameters for all particles\n   *\n   * @method initialize\n   * @memberof Proton#Proton.Color\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   */\n  initialize(particle) {\n    particle.color = this.a.getValue();\n    particle.data.colorA = ColorUtil.hexToRgb(particle.color);\n\n    if (this.b) particle.data.colorB = ColorUtil.hexToRgb(this.b.getValue());\n  }\n\n  /**\n   * Apply this behaviour for all particles every time\n   *\n   * @method applyBehaviour\n   * @memberof Proton#Proton.Color\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} the integrate time 1/ms\n   * @param {Int} the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    if (this.b) {\n      this.calculate(particle, time, index);\n\n      particle.rgb.r =\n        particle.data.colorB.r +\n        (particle.data.colorA.r - particle.data.colorB.r) * this.energy;\n      particle.rgb.g =\n        particle.data.colorB.g +\n        (particle.data.colorA.g - particle.data.colorB.g) * this.energy;\n      particle.rgb.b =\n        particle.data.colorB.b +\n        (particle.data.colorA.b - particle.data.colorB.b) * this.energy;\n\n      particle.rgb.r = Math.floor(particle.rgb.r);\n      particle.rgb.g = Math.floor(particle.rgb.g);\n      particle.rgb.b = Math.floor(particle.rgb.b);\n    } else {\n      particle.rgb.r = particle.data.colorA.r;\n      particle.rgb.g = particle.data.colorA.g;\n      particle.rgb.b = particle.data.colorA.b;\n    }\n  }\n}\n","import MathUtil from \"../math/MathUtil\";\nimport Vector2D from \"../math/Vector2D\";\nimport Span from \"../math/Span\";\nimport Behaviour from \"./Behaviour\";\n\nconst CHANGING = \"changing\";\n\nexport default class Cyclone extends Behaviour {\n  /**\n   * @memberof! Proton#\n   * @augments Proton.Behaviour\n   * @constructor\n   * @alias Proton.Cyclone\n   *\n   * @param {Number} angle\n   * @param {Number} force\n   * @param {Number} [life=Infinity] \t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   *\n   * @property {String} name The Behaviour name\n   */\n  constructor(angle, force, life, easing) {\n    super(life, easing);\n    this.setAngleAndForce(angle, force);\n    this.name = \"Cyclone\";\n  }\n\n  setAngleAndForce(angle, force) {\n    this.force = CHANGING;\n    this.angle = MathUtil.PI / 2;\n\n    if (angle === \"right\") {\n      this.angle = MathUtil.PI / 2;\n    } else if (angle === \"left\") {\n      this.angle = -MathUtil.PI / 2;\n    } else if (angle === \"random\") {\n      this.angle = \"random\";\n    } else if (angle instanceof Span) {\n      this.angle = \"span\";\n      this.span = angle;\n    } else if (angle) {\n      this.angle = angle;\n    }\n\n    if (\n      String(force).toLowerCase() === \"changing\" ||\n      String(force).toLowerCase() === \"chang\" ||\n      String(force).toLowerCase() === \"auto\"\n    ) {\n      this.force = CHANGING;\n    } else if (force) {\n      this.force = force;\n    }\n  }\n\n  /**\n   * Reset this behaviour's parameters\n   *\n   * @method reset\n   * @memberof Proton#Proton.Cyclone\n   * @instance\n   *\n   * @param {Number} angle\n   * @param {Number} force\n   * @param {Number} [life=Infinity] \t\t\tthis behaviour's life\n   * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n   */\n  reset(angle, force, life, easing) {\n    this.angle = MathUtil.PI / 2;\n    this.setAngleAndForce(angle, force);\n    life && super.reset(life, easing);\n  }\n\n  initialize(particle) {\n    if (this.angle === \"random\") {\n      particle.data.cangle = MathUtil.randomAToB(-MathUtil.PI, MathUtil.PI);\n    } else if (this.angle === \"span\") {\n      particle.data.cangle = this.span.getValue();\n    }\n\n    particle.data.cyclone = new Vector2D(0, 0);\n  }\n\n  /**\n   * Apply this behaviour for all particles every time\n   *\n   * @method applyBehaviour\n   * @memberof Proton#Proton.Cyclone\n   * @instance\n   *\n   * @param {Proton.Particle} particle\n   * @param {Number} the integrate time 1/ms\n   * @param {Int} the particle index\n   */\n  applyBehaviour(particle, time, index) {\n    this.calculate(particle, time, index);\n\n    let length;\n    let gradient = particle.v.getGradient();\n    if (this.angle === \"random\" || this.angle === \"span\") {\n      gradient += particle.data.cangle;\n    } else {\n      gradient += this.angle;\n    }\n\n    if (this.force === CHANGING) {\n      length = particle.v.length() / 100;\n    } else {\n      length = this.force;\n    }\n\n    particle.data.cyclone.x = length * Math.cos(gradient);\n    particle.data.cyclone.y = length * Math.sin(gradient);\n    particle.data.cyclone = this.normalizeForce(particle.data.cyclone);\n    particle.a.add(particle.data.cyclone);\n  }\n}\n","import Attraction from './Attraction';\n\nexport default class Repulsion extends Attraction {\n\n\t/**\n\t * The oppisite of Proton.Attraction - turns the force\n\t *\n\t * @memberof! Proton#\n\t * @augments Proton#Proton.Attraction\n\t * @constructor\n\t * @alias Proton.Repulsion\n\t *\n\t * @todo add description for 'force' and 'radius'\n\t *\n\t * @param {Proton.Vector2D} targetPosition the attraction point coordinates\n\t * @param {Number} [force=100]\n\t * @param {Number} [radius=1000]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t *\n\t * @property {Number} force\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(targetPosition, force, radius, life, easing) {\n\t\tsuper(targetPosition, force, radius, life, easing);\n\n\t\tthis.force *= -1;\n\t\tthis.name = 'Repulsion';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#Proton.Repulsion\n\t * @instance\n\t *\n\t * @todo add description for 'force' and 'radius'\n\t *\n\t * @param {Proton.Vector2D} targetPosition the attraction point coordinates\n\t * @param {Number} [force=100]\n\t * @param {Number} [radius=1000]\n\t * @param {Number} [life=Infinity] \t\t\t\tthis behaviour's life\n\t * @param {String} [easing=ease.easeLinear] \tthis behaviour's easing\n\t */\n\treset(targetPosition, force, radius, life, easing) {\n\t\tsuper.reset(targetPosition, force, radius, life, easing);\n\t\tthis.force *= -1;\n\t}\n}\n","import Util from '../utils/Util';\nimport Vector2D from '../math/Vector2D';\nimport Behaviour from './Behaviour';\n\nexport default class GravityWell extends Behaviour {\n\n\t/**\n\t * @memberof! Proton#\n\t * @augments Behaviour\n\t * @constructor\n\t * @alias GravityWell\n\t *\n\t * @param {Vector2D} [centerPoint=new Vector2D] The point in the center\n\t * @param {Number} [force=100]\t\t\t\t\tThe force\n\t * @param {Number} [life=Infinity]\t\t\t\tthis behaviour's life\n\t * @param {String} [easing=easeLinear]\tthis behaviour's easing\n\t *\n\t * @property {String} name The Behaviour name\n\t */\n\tconstructor(centerPoint, force, life, easing) {\n\t\tsuper(life, easing);\n\n\t\tthis.distanceVec = new Vector2D();\n\t\tthis.centerPoint = Util.initValue(centerPoint, new Vector2D);\n\t\tthis.force = Util.initValue(this.normalizeValue(force), 100);\n\n\t\tthis.name = 'GravityWell';\n\t}\n\n\t/**\n\t * Reset this behaviour's parameters\n\t *\n\t * @method reset\n\t * @memberof Proton#GravityWell\n\t * @instance\n\t *\n\t * @param {Vector2D} [centerPoint=new Vector2D] The point in the center\n\t * @param {Number} [force=100]\t\t\t\t\tThe force\n\t * @param {Number} [life=Infinity]\t\t\t\tthis behaviour's life\n\t * @param {String} [easing=easeLinear]\tthis behaviour's easing\n\t */\n\treset(centerPoint, force, life, easing) {\n\t\tthis.distanceVec = new Vector2D();\n\t\tthis.centerPoint = Util.initValue(centerPoint, new Vector2D);\n\t\tthis.force = Util.initValue(this.normalizeValue(force), 100);\n\n\t\tlife && super.reset(life, easing);\n\t};\n\n\t/**\n\t * @inheritdoc\n\t */\n\tinitialize(particle) {\n\t};\n\n\t/**\n\t * Apply this behaviour for all particles every time\n\t *\n\t * @method applyBehaviour\n\t * @memberof Proton#GravityWell\n\t * @instance\n\t *\n\t * @param {Particle} particle\n\t * @param {Number} the integrate time 1/ms\n\t * @param {Int} the particle index\n\t */\n\tapplyBehaviour(particle, time, index) {\n\t\tthis.distanceVec.set(this.centerPoint.x - particle.p.x, this.centerPoint.y - particle.p.y);\n\t\tconst distanceSq = this.distanceVec.lengthSq();\n\n\t\tif (distanceSq !== 0) {\n\t\t\tconst distance = this.distanceVec.length();\n\t\t\tconst factor = (this.force * time) / (distanceSq * distance);\n\n\t\t\tparticle.v.x += factor * this.distanceVec.x;\n\t\t\tparticle.v.y += factor * this.distanceVec.y;\n\t\t}\n\t}\n}","import Util from \"../utils/Util\";\nimport Initialize from \"./Initialize\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default {\n  initialize(emitter, particle, initializes) {\n    const length = initializes.length;\n    let i;\n\n    for (i = 0; i < length; i++) {\n      if (initializes[i] instanceof Initialize) {\n        initializes[i].init(emitter, particle);\n      } else {\n        this.init(emitter, particle, initializes[i]);\n      }\n    }\n\n    this.bindEmitter(emitter, particle);\n  },\n\n  // init\n  init(emitter, particle, initialize) {\n    Util.setProp(particle, initialize);\n    Util.setVectorVal(particle, initialize);\n  },\n\n  bindEmitter(emitter, particle) {\n    if (emitter.bindEmitter) {\n      particle.p.add(emitter.p);\n      particle.v.add(emitter.v);\n      particle.a.add(emitter.a);\n\n      particle.v.rotate(MathUtil.degreeTransform(emitter.rotation));\n    }\n  }\n};\n","import Util from \"../utils/Util\";\nimport Puid from \"../utils/Puid\";\nimport Particle from \"../core/Particle\";\nimport EventDispatcher from \"../events/EventDispatcher\";\n\nimport Rate from \"../initialize/Rate\";\nimport InitializeUtil from \"../initialize/InitializeUtil\";\n\nexport default class Emitter extends Particle {\n  /**\n   * You can use this emit particles.\n   *\n   * It will dispatch follow events:\n   * PARTICLE_CREATED\n   * PARTICLE_UPDATA\n   * PARTICLE_DEAD\n   *\n   * @class Emitter\n   * @constructor\n   * @param {Object} conf the parameters object;\n   * for example {damping:0.01,bindEmitter:false}\n   */\n  constructor(conf = {}) {\n    super(conf);\n\n    this.particles = [];\n    this.behaviours = [];\n    this.initializes = [];\n\n    this.emitTime = 0;\n    this.emitSpeed = 0;\n    this.totalTime = -1;\n\n    /**\n     * The friction coefficient for all particle emit by This;\n     * @property damping\n     * @type {Number}\n     * @default 0.006\n     */\n    this.damping = 0.006;\n\n    /**\n     * If bindEmitter the particles can bind this emitter's property;\n     * @property bindEmitter\n     * @type {Boolean}\n     * @default true\n     */\n    this.bindEmitter = true;\n\n    /**\n     * The number of particles per second emit (a [particle]/b [s]);\n     * @property rate\n     * @type {Rate}\n     * @default Rate(1, .1)\n     */\n    this.rate = new Rate(1, 0.1);\n\n    this.name = \"Emitter\";\n    this.id = Puid.id(this.name);\n  }\n\n  /**\n   * start emit particle\n   * @method emit\n   * @param {Number} emitTime begin emit time;\n   * @param {String} life the life of this emitter\n   */\n  emit(totalTime, life) {\n    this.stoped = false;\n    this.emitTime = 0;\n    this.totalTime = Util.initValue(totalTime, Infinity);\n\n    if (life === true || life === \"life\" || life === \"destroy\") {\n      this.life = totalTime === \"once\" ? 1 : this.totalTime;\n    } else if (!isNaN(life)) {\n      this.life = life;\n    }\n\n    this.rate.init();\n  }\n\n  /**\n   * stop emiting\n   * @method stop\n   */\n  stop() {\n    this.totalTime = -1;\n    this.emitTime = 0;\n    this.stoped = true;\n  }\n\n  preEmit(time) {\n    let oldStoped = this.stoped;\n    let oldEmitTime = this.emitTime;\n    let oldTotalTime = this.totalTime;\n\n    this.stoped = false;\n    this.emitTime = 0;\n    this.totalTime = time;\n    this.rate.init();\n\n    const step = 0.0167;\n    while (time > step) {\n      time -= step;\n      this.update(step);\n    }\n\n    this.stoped = oldStoped;\n    this.emitTime = oldEmitTime + Math.max(time, 0);\n    this.totalTime = oldTotalTime;\n  }\n\n  /**\n   * remove current all particles\n   * @method removeAllParticles\n   */\n  removeAllParticles() {\n    let i = this.particles.length;\n    while (i--) this.particles[i].dead = true;\n  }\n\n  /**\n   * add initialize to this emitter\n   * @method addSelfInitialize\n   */\n  addSelfInitialize(initialize) {\n    if (initialize[\"init\"]) {\n      initialize.init(this);\n    } else {\n      this.initAll();\n    }\n  }\n\n  /**\n   * add the Initialize to particles;\n   *\n   * you can use initializes array:for example emitter.addInitialize(initialize1,initialize2,initialize3);\n   * @method addInitialize\n   * @param {Initialize} initialize like this new Radius(1, 12)\n   */\n  addInitialize(...rest) {\n    let i = rest.length;\n    while (i--) this.initializes.push(rest[i]);\n  }\n\n  /**\n   * remove the Initialize\n   * @method removeInitialize\n   * @param {Initialize} initialize a initialize\n   */\n  removeInitialize(initializer) {\n    const index = this.initializes.indexOf(initializer);\n    if (index > -1) this.initializes.splice(index, 1);\n  }\n\n  /**\n   * remove all Initializes\n   * @method removeInitializers\n   */\n  removeAllInitializers() {\n    Util.emptyArray(this.initializes);\n  }\n\n  /**\n   * add the Behaviour to particles;\n   *\n   * you can use Behaviours array:emitter.addBehaviour(Behaviour1,Behaviour2,Behaviour3);\n   * @method addBehaviour\n   * @param {Behaviour} behaviour like this new Color('random')\n   */\n  addBehaviour(...rest) {\n    let i = arguments.length;\n    while (i--) {\n      let behaviour = rest[i];\n      this.behaviours.push(behaviour);\n      if (behaviour.parents) behaviour.parents.push(this);\n    }\n  }\n\n  /**\n   * remove the Behaviour\n   * @method removeBehaviour\n   * @param {Behaviour} behaviour a behaviour\n   */\n  removeBehaviour(behaviour) {\n    let index = this.behaviours.indexOf(behaviour);\n    this.behaviours.splice(index, 1);\n\n    if (behaviour.parents) {\n      index = behaviour.parents.indexOf(behaviour);\n      behaviour.parents.splice(index, 1);\n    }\n\n    return index;\n  }\n\n  /**\n   * remove all behaviours\n   * @method removeAllBehaviours\n   */\n  removeAllBehaviours() {\n    Util.emptyArray(this.behaviours);\n  }\n\n  // emitter update\n  update(time) {\n    this.age += time;\n    if (this.age >= this.life || this.dead) this.destroy();\n\n    this.emitting(time);\n    this.integrate(time);\n  }\n\n  integrate(time) {\n    if (!this.parent) return;\n\n    const damping = 1 - this.damping;\n    this.parent.integrator.calculate(this, time, damping);\n\n    const length = this.particles.length;\n    let i, particle;\n\n    for (i = length - 1; i >= 0; i--) {\n      particle = this.particles[i];\n\n      // particle update\n      particle.update(time, i);\n      this.parent.integrator.calculate(particle, time, damping);\n      this.dispatch(\"PARTICLE_UPDATE\", particle);\n\n      // check dead\n      if (particle.dead) {\n        this.dispatch(\"PARTICLE_DEAD\", particle);\n\n        this.parent.pool.expire(particle);\n        this.particles.splice(i, 1);\n      }\n    }\n  }\n\n  dispatch(event, target) {\n    this.parent && this.parent.dispatchEvent(event, target);\n    this.bindEvent && this.dispatchEvent(event, target);\n  }\n\n  emitting(time) {\n    if (this.totalTime === \"once\") {\n      let i;\n      const length = this.rate.getValue(99999);\n\n      if (length > 0) this.emitSpeed = length;\n      for (i = 0; i < length; i++) this.createParticle();\n      this.totalTime = \"none\";\n    } else {\n      this.emitTime += time;\n\n      if (this.emitTime < this.totalTime) {\n        const length = this.rate.getValue(time);\n        let i;\n\n        if (length > 0) this.emitSpeed = length;\n        for (i = 0; i < length; i++) this.createParticle();\n      }\n    }\n  }\n\n  /**\n   * create single particle;\n   *\n   * can use emit({x:10},new Gravity(10),{'particleUpdate',fun}) or emit([{x:10},new Initialize],new Gravity(10),{'particleUpdate',fun})\n   * @method removeAllParticles\n   */\n  createParticle(initialize, behaviour) {\n    const particle = this.parent.pool.get(Particle);\n    this.setupParticle(particle, initialize, behaviour);\n    this.dispatch(\"PARTICLE_CREATED\", particle);\n\n    return particle;\n  }\n\n  setupParticle(particle, initialize, behaviour) {\n    let initializes = this.initializes;\n    let behaviours = this.behaviours;\n\n    if (initialize) initializes = Util.toArray(initialize);\n    if (behaviour) behaviours = Util.toArray(behaviour);\n\n    particle.reset();\n    InitializeUtil.initialize(this, particle, initializes);\n    particle.addBehaviours(behaviours);\n    particle.parent = this;\n\n    this.particles.push(particle);\n  }\n\n  remove() {\n    this.stop();\n    Util.destroyAll(this.particles);\n  }\n\n  /**\n   * Destory this Emitter\n   * @method destroy\n   */\n  destroy() {\n    this.dead = true;\n    this.remove();\n    this.removeAllInitializers();\n    this.removeAllBehaviours();\n    this.parent && this.parent.removeEmitter(this);\n  }\n}\n\nEventDispatcher.bind(Emitter);\n","import Emitter from \"./Emitter\";\n\nexport default class BehaviourEmitter extends Emitter {\n  /**\n   * The BehaviourEmitter class inherits from Proton.Emitter\n   *\n   * use the BehaviourEmitter you can add behaviours to self;\n   * @class Proton.BehaviourEmitter\n   * @constructor\n   * @param {Object} conf the parameters object;\n   */\n  constructor(conf) {\n    super(conf);\n\n    this.selfBehaviours = [];\n  }\n\n  /**\n   * add the Behaviour to emitter;\n   *\n   * you can use Behaviours array:emitter.addSelfBehaviour(Behaviour1,Behaviour2,Behaviour3);\n   * @method addSelfBehaviour\n   * @param {Proton.Behaviour} behaviour like this new Proton.Color('random')\n   */\n  addSelfBehaviour(...rest) {\n    let i,\n      length = rest.length;\n\n    for (i = 0; i < length; i++) {\n      let behaviour = rest[i];\n      this.selfBehaviours.push(behaviour);\n      behaviour.initialize(this);\n    }\n  }\n\n  /**\n   * remove the Behaviour for self\n   * @method removeSelfBehaviour\n   * @param {Proton.Behaviour} behaviour a behaviour\n   */\n  removeSelfBehaviour(behaviour) {\n    const index = this.selfBehaviours.indexOf(behaviour);\n    if (index > -1) this.selfBehaviours.splice(index, 1);\n  }\n\n  update(time) {\n    super.update(time);\n\n    if (!this.sleep) {\n      const length = this.selfBehaviours.length;\n      let i;\n\n      for (i = 0; i < length; i++) {\n        this.selfBehaviours[i].applyBehaviour(this, time, i);\n      }\n    }\n  }\n}\n","import Util from \"../utils/Util\";\nimport Emitter from \"./Emitter\";\n\nexport default class FollowEmitter extends Emitter {\n  /**\n   * The FollowEmitter class inherits from Proton.Emitter\n   *\n   * use the FollowEmitter will emit particle when mousemoving\n   *\n   * @class Proton.FollowEmitter\n   * @constructor\n   * @param {Element} mouseTarget mouseevent's target;\n   * @param {Number} ease the easing of following speed;\n   * @default 0.7\n   * @param {Object} conf the parameters object;\n   */\n  constructor(mouseTarget, ease, conf) {\n    super(conf);\n\n    this.mouseTarget = Util.initValue(mouseTarget, window);\n    this.ease = Util.initValue(ease, 0.7);\n\n    this._allowEmitting = false;\n    this.initEventHandler();\n  }\n\n  initEventHandler() {\n    this.mousemoveHandler = e => this.mousemove.call(this, e);\n    this.mousedownHandler = e => this.mousedown.call(this, e);\n    this.mouseupHandler = e => this.mouseup.call(this, e);\n\n    this.mouseTarget.addEventListener(\n      \"mousemove\",\n      this.mousemoveHandler,\n      false\n    );\n  }\n\n  /**\n   * start emit particle\n   * @method emit\n   */\n  emit() {\n    this._allowEmitting = true;\n  }\n\n  /**\n   * stop emiting\n   * @method stop\n   */\n  stop() {\n    this._allowEmitting = false;\n  }\n\n  mousemove(e) {\n    if (e.layerX || e.layerX === 0) {\n      this.p.x += (e.layerX - this.p.x) * this.ease;\n      this.p.y += (e.layerY - this.p.y) * this.ease;\n    } else if (e.offsetX || e.offsetX === 0) {\n      this.p.x += (e.offsetX - this.p.x) * this.ease;\n      this.p.y += (e.offsetY - this.p.y) * this.ease;\n    }\n\n    if (this._allowEmitting) super.emit(\"once\");\n  }\n\n  /**\n   * Destory this Emitter\n   * @method destroy\n   */\n  destroy() {\n    super.destroy();\n    this.mouseTarget.removeEventListener(\n      \"mousemove\",\n      this.mousemoveHandler,\n      false\n    );\n  }\n}\n","import Pool from \"../core/Pool\";\n\nexport default class BaseRenderer {\n    constructor(element, stroke) {\n        this.pool = new Pool();\n        this.element = element;\n        this.stroke = stroke;\n        this.circleConf = { isCircle: true };\n\n        this.initHandler();\n        this.name = \"BaseRenderer\";\n    }\n\n    setStroke(color = \"#000000\", thinkness = 1) {\n        this.stroke = { color, thinkness };\n    }\n\n    initHandler() {\n        this._protonUpdateHandler = () => {\n            this.onProtonUpdate.call(this);\n        };\n\n        this._protonUpdateAfterHandler = () => {\n            this.onProtonUpdateAfter.call(this);\n        };\n\n        this._emitterAddedHandler = emitter => {\n            this.onEmitterAdded.call(this, emitter);\n        };\n\n        this._emitterRemovedHandler = emitter => {\n            this.onEmitterRemoved.call(this, emitter);\n        };\n\n        this._particleCreatedHandler = particle => {\n            this.onParticleCreated.call(this, particle);\n        };\n\n        this._particleUpdateHandler = particle => {\n            this.onParticleUpdate.call(this, particle);\n        };\n\n        this._particleDeadHandler = particle => {\n            this.onParticleDead.call(this, particle);\n        };\n    }\n\n    init(proton) {\n        this.parent = proton;\n\n        proton.addEventListener(\"PROTON_UPDATE\", this._protonUpdateHandler);\n        proton.addEventListener(\n            \"PROTON_UPDATE_AFTER\",\n            this._protonUpdateAfterHandler\n        );\n\n        proton.addEventListener(\"EMITTER_ADDED\", this._emitterAddedHandler);\n        proton.addEventListener(\"EMITTER_REMOVED\", this._emitterRemovedHandler);\n\n        proton.addEventListener(\n            \"PARTICLE_CREATED\",\n            this._particleCreatedHandler\n        );\n        proton.addEventListener(\"PARTICLE_UPDATE\", this._particleUpdateHandler);\n        proton.addEventListener(\"PARTICLE_DEAD\", this._particleDeadHandler);\n    }\n\n    resize(width, height) {}\n\n    destroy() {\n        this.remove();\n    }\n\n    remove(proton) {\n        this.parent.removeEventListener(\n            \"PROTON_UPDATE\",\n            this._protonUpdateHandler\n        );\n        this.parent.removeEventListener(\n            \"PROTON_UPDATE_AFTER\",\n            this._protonUpdateAfterHandler\n        );\n\n        this.parent.removeEventListener(\n            \"EMITTER_ADDED\",\n            this._emitterAddedHandler\n        );\n        this.parent.removeEventListener(\n            \"EMITTER_REMOVED\",\n            this._emitterRemovedHandler\n        );\n\n        this.parent.removeEventListener(\n            \"PARTICLE_CREATED\",\n            this._particleCreatedHandler\n        );\n        this.parent.removeEventListener(\n            \"PARTICLE_UPDATE\",\n            this._particleUpdateHandler\n        );\n        this.parent.removeEventListener(\n            \"PARTICLE_DEAD\",\n            this._particleDeadHandler\n        );\n\n        this.parent = null;\n    }\n\n    onProtonUpdate() {}\n    onProtonUpdateAfter() {}\n\n    onEmitterAdded(emitter) {}\n    onEmitterRemoved(emitter) {}\n\n    onParticleCreated(particle) {}\n    onParticleUpdate(particle) {}\n    onParticleDead(particle) {}\n}\n","import ImgUtil from \"../utils/ImgUtil\";\nimport ColorUtil from \"../utils/ColorUtil\";\nimport MathUtil from \"../math/MathUtil\";\nimport BaseRenderer from \"./BaseRenderer\";\n\nexport default class CanvasRenderer extends BaseRenderer {\n    constructor(element) {\n        super(element);\n\n        this.stroke = null;\n        this.context = this.element.getContext(\"2d\");\n        this.bufferCache = {};\n        this.name = \"CanvasRenderer\";\n    }\n\n    resize(width, height) {\n        this.element.width = width;\n        this.element.height = height;\n    }\n\n    onProtonUpdate() {\n        this.context.clearRect(0, 0, this.element.width, this.element.height);\n    }\n\n    onParticleCreated(particle) {\n        if (particle.body) {\n            ImgUtil.getImgFromCache(particle.body, this.addImg2Body, particle);\n        } else {\n            particle.color = particle.color || \"#ff0000\";\n        }\n    }\n\n    onParticleUpdate(particle) {\n        if (particle.body) {\n            if (particle.body instanceof Image) this.drawImage(particle);\n        } else {\n            this.drawCircle(particle);\n        }\n    }\n\n    onParticleDead(particle) {\n        particle.body = null;\n    }\n\n    // private\n    addImg2Body(img, particle) {\n        particle.body = img;\n    }\n\n    // private drawCircle\n    drawImage(particle) {\n        const w = (particle.body.width * particle.scale) | 0;\n        const h = (particle.body.height * particle.scale) | 0;\n        const x = particle.p.x - w / 2;\n        const y = particle.p.y - h / 2;\n\n        if (!!particle.color) {\n            if (!particle.data[\"buffer\"])\n                particle.data.buffer = this.createBuffer(particle.body);\n\n            const bufContext = particle.data.buffer.getContext(\"2d\");\n            bufContext.clearRect(\n                0,\n                0,\n                particle.data.buffer.width,\n                particle.data.buffer.height\n            );\n            bufContext.globalAlpha = particle.alpha;\n            bufContext.drawImage(particle.body, 0, 0);\n\n            bufContext.globalCompositeOperation = \"source-atop\";\n            bufContext.fillStyle = ColorUtil.rgbToHex(particle.rgb);\n            bufContext.fillRect(\n                0,\n                0,\n                particle.data.buffer.width,\n                particle.data.buffer.height\n            );\n            bufContext.globalCompositeOperation = \"source-over\";\n            bufContext.globalAlpha = 1;\n\n            this.context.drawImage(\n                particle.data.buffer,\n                0,\n                0,\n                particle.data.buffer.width,\n                particle.data.buffer.height,\n                x,\n                y,\n                w,\n                h\n            );\n        } else {\n            this.context.save();\n\n            this.context.globalAlpha = particle.alpha;\n            this.context.translate(particle.p.x, particle.p.y);\n            this.context.rotate(MathUtil.degreeTransform(particle.rotation));\n            this.context.translate(-particle.p.x, -particle.p.y);\n            this.context.drawImage(\n                particle.body,\n                0,\n                0,\n                particle.body.width,\n                particle.body.height,\n                x,\n                y,\n                w,\n                h\n            );\n\n            this.context.globalAlpha = 1;\n            this.context.restore();\n        }\n    }\n\n    // private drawCircle --\n    drawCircle(particle) {\n        if (particle.rgb) {\n            this.context.fillStyle = `rgba(${particle.rgb.r},${particle.rgb.g},${particle.rgb.b},${particle.alpha})`;\n        } else {\n            this.context.fillStyle = particle.color;\n        }\n\n        // draw circle\n        this.context.beginPath();\n        this.context.arc(\n            particle.p.x,\n            particle.p.y,\n            particle.radius,\n            0,\n            Math.PI * 2,\n            true\n        );\n\n        if (this.stroke) {\n            this.context.strokeStyle = this.stroke.color;\n            this.context.lineWidth = this.stroke.thinkness;\n            this.context.stroke();\n        }\n\n        this.context.closePath();\n        this.context.fill();\n    }\n\n    // private createBuffer\n    createBuffer(image) {\n        if (image instanceof Image) {\n            const size = image.width + \"_\" + image.height;\n            let canvas = this.bufferCache[size];\n\n            if (!canvas) {\n                canvas = document.createElement(\"canvas\");\n                canvas.width = image.width;\n                canvas.height = image.height;\n                this.bufferCache[size] = canvas;\n            }\n\n            return canvas;\n        }\n    }\n}\n","import DomUtil from \"../utils/DomUtil\";\nimport ImgUtil from \"../utils/ImgUtil\";\nimport BaseRenderer from \"./BaseRenderer\";\n\nexport default class DomRenderer extends BaseRenderer {\n  constructor(element) {\n    super(element);\n\n    this.stroke = null;\n    this.pool.create = (body, particle) => this.createBody(body, particle);\n    this.addImg2Body = this.addImg2Body.bind(this);\n\n    this.transform3d = false;\n    this.name = \"DomRenderer\";\n  }\n\n  onParticleCreated(particle) {\n    if (particle.body) {\n      ImgUtil.getImgFromCache(particle.body, this.addImg2Body, particle);\n    } else {\n      particle.body = this.pool.get(this.circleConf, particle);\n      this.element.appendChild(particle.body);\n    }\n  }\n\n  onParticleUpdate(particle) {\n    if (this.bodyReady(particle)) {\n      if (this.transform3d)\n        DomUtil.transform3d(\n          particle.body,\n          particle.p.x,\n          particle.p.y,\n          particle.scale,\n          particle.rotation\n        );\n      else\n        DomUtil.transform(\n          particle.body,\n          particle.p.x,\n          particle.p.y,\n          particle.scale,\n          particle.rotation\n        );\n\n      particle.body.style.opacity = particle.alpha;\n      if (particle.body.isCircle) {\n        particle.body.style.backgroundColor = particle.color || \"#ff0000\";\n      }\n    }\n  }\n\n  onParticleDead(particle) {\n    if (this.bodyReady(particle)) {\n      this.element.removeChild(particle.body);\n      this.pool.expire(particle.body);\n      particle.body = null;\n    }\n  }\n\n  bodyReady(particle) {\n    return (\n      typeof particle.body === \"object\" &&\n      particle.body &&\n      !particle.body.isInner\n    );\n  }\n\n  // private\n  addImg2Body(img, particle) {\n    if (particle.dead) return;\n    particle.body = this.pool.get(img, particle);\n    DomUtil.resize(particle.body, img.width, img.height);\n\n    this.element.appendChild(particle.body);\n  }\n\n  createBody(body, particle) {\n    if (body.isCircle) return this.createCircle(particle);\n    else return this.createSprite(body, particle);\n  }\n\n  // private --\n  createCircle(particle) {\n    const dom = DomUtil.createDiv(\n      `${particle.id}_dom`,\n      2 * particle.radius,\n      2 * particle.radius\n    );\n    dom.style.borderRadius = `${particle.radius}px`;\n\n    if (this.stroke) {\n      dom.style.borderColor = this.stroke.color;\n      dom.style.borderWidth = `${this.stroke.thinkness}px`;\n    }\n    dom.isCircle = true;\n\n    return dom;\n  }\n\n  createSprite(body, particle) {\n    const url = typeof body === \"string\" ? body : body.src;\n    const dom = DomUtil.createDiv(\n      `${particle.id}_dom`,\n      body.width,\n      body.height\n    );\n    dom.style.backgroundImage = `url(${url})`;\n\n    return dom;\n  }\n}\n","import BaseRenderer from \"./BaseRenderer\";\n\nexport default class EaselRenderer extends BaseRenderer {\n  constructor(element, stroke) {\n    super(element);\n\n    this.stroke = stroke;\n    this.name = \"EaselRenderer\";\n  }\n\n  onParticleCreated(particle) {\n    if (particle.body) {\n      this.createSprite(particle);\n    } else {\n      this.createCircle(particle);\n    }\n\n    this.element.addChild(particle.body);\n  }\n\n  onParticleUpdate(particle) {\n    if (particle.body) {\n      particle.body.x = particle.p.x;\n      particle.body.y = particle.p.y;\n\n      particle.body.alpha = particle.alpha;\n      particle.body.scaleX = particle.body.scaleY = particle.scale;\n      particle.body.rotation = particle.rotation;\n    }\n  }\n\n  onParticleDead(particle) {\n    if (particle.body) {\n      particle.body.parent && particle.body.parent.removeChild(particle.body);\n      this.pool.expire(particle.body);\n      particle.body = null;\n    }\n\n    if (particle.graphics) this.pool.expire(particle.graphics);\n  }\n\n  // private\n  createSprite(particle) {\n    particle.body = this.pool.get(particle.body);\n\n    if (particle.body.parent) return;\n    if (particle.body[\"image\"]) {\n      particle.body.regX = particle.body.image.width / 2;\n      particle.body.regY = particle.body.image.height / 2;\n    }\n  }\n\n  createCircle(particle) {\n    const graphics = this.pool.get(createjs.Graphics);\n\n    if (this.stroke) {\n      if (this.stroke instanceof String) graphics.beginStroke(this.stroke);\n      else graphics.beginStroke(\"#000000\");\n    }\n    graphics\n      .beginFill(particle.color || \"#ff0000\")\n      .drawCircle(0, 0, particle.radius);\n\n    const shape = this.pool.get(createjs.Shape, [graphics]);\n\n    particle.body = shape;\n    particle.graphics = graphics;\n  }\n}\n","import Rectangle from \"../math/Rectangle\";\nimport BaseRenderer from \"./BaseRenderer\";\n\nexport default class PixelRenderer extends BaseRenderer {\n  constructor(element, rectangle) {\n    super(element);\n\n    this.context = this.element.getContext(\"2d\");\n    this.imageData = null;\n    this.rectangle = null;\n    this.rectangle = rectangle;\n    this.createImageData(rectangle);\n\n    this.name = \"PixelRenderer\";\n  }\n\n  resize(width, height) {\n    this.element.width = width;\n    this.element.height = height;\n  }\n\n  createImageData(rectangle) {\n    this.rectangle = rectangle\n      ? rectangle\n      : new Rectangle(0, 0, this.element.width, this.element.height);\n    this.imageData = this.context.createImageData(\n      this.rectangle.width,\n      this.rectangle.height\n    );\n    this.context.putImageData(\n      this.imageData,\n      this.rectangle.x,\n      this.rectangle.y\n    );\n  }\n\n  onProtonUpdate() {\n    this.context.clearRect(\n      this.rectangle.x,\n      this.rectangle.y,\n      this.rectangle.width,\n      this.rectangle.height\n    );\n    this.imageData = this.context.getImageData(\n      this.rectangle.x,\n      this.rectangle.y,\n      this.rectangle.width,\n      this.rectangle.height\n    );\n  }\n\n  onProtonUpdateAfter() {\n    this.context.putImageData(\n      this.imageData,\n      this.rectangle.x,\n      this.rectangle.y\n    );\n  }\n\n  onParticleCreated(particle) {}\n\n  onParticleUpdate(particle) {\n    if (this.imageData) {\n      this.setPixel(\n        this.imageData,\n        Math.floor(particle.p.x - this.rectangle.x),\n        Math.floor(particle.p.y - this.rectangle.y),\n        particle\n      );\n    }\n  }\n\n  setPixel(imagedata, x, y, particle) {\n    const rgb = particle.rgb;\n    if (x < 0 || x > this.element.width || y < 0 || y > this.elementwidth)\n      return;\n\n    const i = ((y >> 0) * imagedata.width + (x >> 0)) * 4;\n\n    imagedata.data[i] = rgb.r;\n    imagedata.data[i + 1] = rgb.g;\n    imagedata.data[i + 2] = rgb.b;\n    imagedata.data[i + 3] = particle.alpha * 255;\n  }\n\n  onParticleDead(particle) {}\n}\n","import ColorUtil from \"../utils/ColorUtil\";\nimport MathUtil from \"../math/MathUtil\";\nimport BaseRenderer from \"./BaseRenderer\";\n\nlet PIXIClass;\nexport default class PixiRenderer extends BaseRenderer {\n  constructor(element, stroke) {\n    super(element);\n\n    this.stroke = stroke;\n    this.color = false;\n    this.setColor = false;\n    this.blendMode = null;\n    this.pool.create = (body, particle) => this.createBody(body, particle);\n    this.setPIXI(window.PIXI);\n\n    this.name = \"PixiRenderer\";\n  }\n\n  setPIXI(PIXI) {\n    try {\n      PIXIClass = PIXI || { Sprite: {} };\n      this.createFromImage =\n        PIXIClass.Sprite.from || PIXIClass.Sprite.fromImage;\n    } catch (e) {}\n  }\n\n  onProtonUpdate() {}\n\n  /**\n   * @param particle\n   */\n  onParticleCreated(particle) {\n    if (particle.body) {\n      particle.body = this.pool.get(particle.body, particle);\n    } else {\n      particle.body = this.pool.get(this.circleConf, particle);\n    }\n\n    if (this.blendMode) {\n      particle.body.blendMode = this.blendMode;\n    }\n\n    this.element.addChild(particle.body);\n  }\n\n  /**\n   * @param particle\n   */\n  onParticleUpdate(particle) {\n    this.transform(particle, particle.body);\n\n    if (this.setColor === true || this.color === true) {\n      particle.body.tint = ColorUtil.getHex16FromParticle(particle);\n    }\n  }\n\n  /**\n   * @param particle\n   */\n  onParticleDead(particle) {\n    this.element.removeChild(particle.body);\n    this.pool.expire(particle.body);\n    particle.body = null;\n  }\n\n  destroy(particles) {\n    super.destroy();\n    this.pool.destroy();\n\n    let i = particles.length;\n    while (i--) {\n      let particle = particles[i];\n      if (particle.body) {\n        this.element.removeChild(particle.body);\n      }\n    }\n  }\n\n  transform(particle, target) {\n    target.x = particle.p.x;\n    target.y = particle.p.y;\n\n    target.alpha = particle.alpha;\n\n    target.scale.x = particle.scale;\n    target.scale.y = particle.scale;\n\n    // using cached version of MathUtil.PI_180 for slight performance increase.\n    target.rotation = particle.rotation * MathUtil.PI_180; // MathUtil.PI_180;\n  }\n\n  createBody(body, particle) {\n    if (body.isCircle) return this.createCircle(particle);\n    else return this.createSprite(body);\n  }\n\n  createSprite(body) {\n    const sprite = body.isInner\n      ? this.createFromImage(body.src)\n      : new PIXIClass.Sprite(body);\n\n    sprite.anchor.x = 0.5;\n    sprite.anchor.y = 0.5;\n\n    return sprite;\n  }\n\n  createCircle(particle) {\n    const graphics = new PIXIClass.Graphics();\n\n    if (this.stroke) {\n      const stroke = this.stroke instanceof String ? this.stroke : 0x000000;\n      graphics.beginStroke(stroke);\n    }\n\n    graphics.beginFill(particle.color || 0x008ced);\n    graphics.drawCircle(0, 0, particle.radius);\n    graphics.endFill();\n\n    return graphics;\n  }\n}\n","import Mat3 from \"../math/Mat3\";\n\nexport default class MStack {\n  constructor() {\n    this.mats = [];\n    this.size = 0;\n\n    for (let i = 0; i < 20; i++)\n      this.mats.push(Mat3.create([0, 0, 0, 0, 0, 0, 0, 0, 0]));\n  }\n\n  set(m, i) {\n    if (i === 0) Mat3.set(m, this.mats[0]);\n    else Mat3.multiply(this.mats[i - 1], m, this.mats[i]);\n\n    this.size = Math.max(this.size, i + 1);\n  }\n\n  push(m) {\n    if (this.size === 0) Mat3.set(m, this.mats[0]);\n    else Mat3.multiply(this.mats[this.size - 1], m, this.mats[this.size]);\n\n    this.size++;\n  }\n\n  pop() {\n    if (this.size > 0) this.size--;\n  }\n\n  top() {\n    return this.mats[this.size - 1];\n  }\n}\n","import Mat3 from '../math/Mat3';\nimport BaseRenderer from './BaseRenderer';\n\nimport Util from '../utils/Util';\nimport ImgUtil from '../utils/ImgUtil';\nimport MStack from '../utils/MStack';\nimport DomUtil from '../utils/DomUtil';\nimport WebGLUtil from '../utils/WebGLUtil';\nimport MathUtil from '../math/MathUtil';\n\nexport default class WebGLRenderer extends BaseRenderer {\n\n    constructor(element) {\n        super(element);\n\n        this.gl = this.element.getContext('experimental-webgl', { antialias: true, stencil: false, depth: false });\n        if (!this.gl) alert('Sorry your browser do not suppest WebGL!');\n\n        this.initVar();\n        this.setMaxRadius();\n        this.initShaders();\n        this.initBuffers();\n\n        this.gl.blendEquation(this.gl.FUNC_ADD);\n        this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n        this.gl.enable(this.gl.BLEND);\n\n        this.addImg2Body = this.addImg2Body.bind(this);\n\n        this.name = 'WebGLRenderer';\n    }\n\n    init(proton) {\n        super.init(proton);\n        this.resize(this.element.width, this.element.height);\n    }\n\n    resize(width, height) {\n        this.umat[4] = -2;\n        this.umat[7] = 1;\n\n        this.smat[0] = 1 / width;\n        this.smat[4] = 1 / height;\n\n        this.mstack.set(this.umat, 0);\n        this.mstack.set(this.smat, 1);\n\n        this.gl.viewport(0, 0, width, height);\n        this.element.width = width;\n        this.element.height = height;\n    }\n\n    setMaxRadius(radius) {\n        this.circleCanvasURL = this.createCircle(radius);\n    }\n\n    getVertexShader() {\n        const vsSource = ['uniform vec2 viewport;', 'attribute vec2 aVertexPosition;', 'attribute vec2 aTextureCoord;', 'uniform mat3 tMat;', 'varying vec2 vTextureCoord;', 'varying float alpha;', 'void main() {', 'vec3 v = tMat * vec3(aVertexPosition, 1.0);', 'gl_Position = vec4(v.x, v.y, 0, 1);', 'vTextureCoord = aTextureCoord;', 'alpha = tMat[0][2];', '}'].join('\\n');\n        return vsSource;\n    }\n\n    getFragmentShader() {\n        const fsSource = ['precision mediump float;', 'varying vec2 vTextureCoord;', 'varying float alpha;', 'uniform sampler2D uSampler;', 'uniform vec4 color;', 'uniform bool useTexture;', 'uniform vec3 uColor;', 'void main() {', 'vec4 textureColor = texture2D(uSampler, vTextureCoord);', 'gl_FragColor = textureColor * vec4(uColor, 1.0);', 'gl_FragColor.w *= alpha;', '}'].join('\\n');\n        return fsSource;\n    }\n\n    initVar() {\n        this.mstack = new MStack();\n        this.umat = Mat3.create([2, 0, 1, 0, -2, 0, -1, 1, 1]);\n        this.smat = Mat3.create([1 / 100, 0, 1, 0, 1 / 100, 0, 0, 0, 1]);\n        this.texturebuffers = {};\n    }\n\n    blendEquation(A) {\n        this.gl.blendEquation(this.gl[A]);\n    }\n\n    blendFunc(A, B) {\n        this.gl.blendFunc(this.gl[A], this.gl[B]);\n    }\n\n    getShader(gl, str, fs) {\n        const shader = fs ? gl.createShader(gl.FRAGMENT_SHADER) : gl.createShader(gl.VERTEX_SHADER);\n\n        gl.shaderSource(shader, str);\n        gl.compileShader(shader);\n\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n            alert(gl.getShaderInfoLog(shader));\n            return null;\n        }\n\n        return shader;\n    }\n\n    initShaders() {\n        const fragmentShader = this.getShader(this.gl, this.getFragmentShader(), true);\n        const vertexShader = this.getShader(this.gl, this.getVertexShader(), false);\n\n        this.sprogram = this.gl.createProgram();\n        this.gl.attachShader(this.sprogram, vertexShader);\n        this.gl.attachShader(this.sprogram, fragmentShader);\n        this.gl.linkProgram(this.sprogram);\n\n        if (!this.gl.getProgramParameter(this.sprogram, this.gl.LINK_STATUS))\n            alert('Could not initialise shaders');\n\n        this.gl.useProgram(this.sprogram);\n        this.sprogram.vpa = this.gl.getAttribLocation(this.sprogram, 'aVertexPosition');\n        this.sprogram.tca = this.gl.getAttribLocation(this.sprogram, 'aTextureCoord');\n        this.gl.enableVertexAttribArray(this.sprogram.tca);\n        this.gl.enableVertexAttribArray(this.sprogram.vpa);\n\n        this.sprogram.tMatUniform = this.gl.getUniformLocation(this.sprogram, 'tMat');\n        this.sprogram.samplerUniform = this.gl.getUniformLocation(this.sprogram, 'uSampler');\n        this.sprogram.useTex = this.gl.getUniformLocation(this.sprogram, 'useTexture');\n        this.sprogram.color = this.gl.getUniformLocation(this.sprogram, 'uColor');\n        this.gl.uniform1i(this.sprogram.useTex, 1);\n    };\n\n    initBuffers() {\n        const vs = [0, 3, 1, 0, 2, 3];\n        let idx;\n\n        this.unitIBuffer = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitIBuffer);\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(vs), this.gl.STATIC_DRAW);\n\n        let i;\n        let ids = [];\n        for (i = 0; i < 100; i++) ids.push(i);\n        idx = new Uint16Array(ids);\n\n        this.unitI33 = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitI33);\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, idx, this.gl.STATIC_DRAW);\n\n        ids = [];\n        for (i = 0; i < 100; i++) ids.push(i, i + 1, i + 2);\n        idx = new Uint16Array(ids);\n\n        this.stripBuffer = this.gl.createBuffer();\n        this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.stripBuffer);\n        this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, idx, this.gl.STATIC_DRAW);\n    };\n\n    createCircle(raidus) {\n        this.circleCanvasRadius = WebGLUtil.nhpot(Util.initValue(raidus, 32));\n        const canvas = DomUtil.createCanvas('circle_canvas', this.circleCanvasRadius * 2, this.circleCanvasRadius * 2);\n        const context = canvas.getContext('2d');\n\n        context.beginPath();\n        context.arc(this.circleCanvasRadius, this.circleCanvasRadius, this.circleCanvasRadius, 0, Math.PI * 2, true);\n        context.closePath();\n        context.fillStyle = '#FFF';\n        context.fill();\n\n        return canvas.toDataURL();\n    };\n\n    drawImg2Canvas(particle) {\n        const _w = particle.body.width;\n        const _h = particle.body.height;\n\n        const _width = WebGLUtil.nhpot(particle.body.width);\n        const _height = WebGLUtil.nhpot(particle.body.height);\n\n        const _scaleX = particle.body.width / _width;\n        const _scaleY = particle.body.height / _height;\n\n        if (!this.texturebuffers[particle.data.src])\n            this.texturebuffers[particle.data.src] = [this.gl.createTexture(), this.gl.createBuffer(), this.gl.createBuffer()];\n\n        particle.data.texture = this.texturebuffers[particle.data.src][0];\n        particle.data.vcBuffer = this.texturebuffers[particle.data.src][1];\n        particle.data.tcBuffer = this.texturebuffers[particle.data.src][2];\n\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.data.tcBuffer);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, _scaleX, 0.0, 0.0, _scaleY, _scaleY, _scaleY]), this.gl.STATIC_DRAW);\n        this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.data.vcBuffer);\n        this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array([0.0, 0.0, _w, 0.0, 0.0, _h, _w, _h]), this.gl.STATIC_DRAW);\n\n        const context = particle.data.canvas.getContext('2d');\n        const data = context.getImageData(0, 0, _width, _height);\n\n        this.gl.bindTexture(this.gl.TEXTURE_2D, particle.data.texture);\n        this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, this.gl.RGBA, this.gl.UNSIGNED_BYTE, data);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);\n        this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR_MIPMAP_NEAREST);\n        this.gl.generateMipmap(this.gl.TEXTURE_2D);\n\n        particle.data.textureLoaded = true;\n        particle.data.textureWidth = _w;\n        particle.data.textureHeight = _h;\n    }\n\n    onProtonUpdate() {\n        // this.gl.clearColor(0, 0, 0, 1);\n        // this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);\n    }\n\n    onParticleCreated(particle) {\n        particle.data.textureLoaded = false;\n        particle.data.tmat = Mat3.create();\n        particle.data.tmat[8] = 1;\n        particle.data.imat = Mat3.create();\n        particle.data.imat[8] = 1;\n\n        if (particle.body) {\n            ImgUtil.getImgFromCache(particle.body, this.addImg2Body, particle);\n        } else {\n            ImgUtil.getImgFromCache(this.circleCanvasURL, this.addImg2Body, particle);\n            particle.data.oldScale = particle.radius / this.circleCanvasRadius;\n        }\n    }\n\n    // private\n    addImg2Body(img, particle) {\n        if (particle.dead) return;\n        particle.body = img;\n        particle.data.src = img.src;\n        particle.data.canvas = ImgUtil.getCanvasFromCache(img);\n        particle.data.oldScale = 1;\n\n        this.drawImg2Canvas(particle);\n    }\n\n    onParticleUpdate(particle) {\n        if (particle.data.textureLoaded) {\n            this.updateMatrix(particle);\n\n            this.gl.uniform3f(this.sprogram.color, particle.rgb.r / 255, particle.rgb.g / 255, particle.rgb.b / 255);\n            this.gl.uniformMatrix3fv(this.sprogram.tMatUniform, false, this.mstack.top());\n\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.data.vcBuffer);\n            this.gl.vertexAttribPointer(this.sprogram.vpa, 2, this.gl.FLOAT, false, 0, 0);\n            this.gl.bindBuffer(this.gl.ARRAY_BUFFER, particle.data.tcBuffer);\n            this.gl.vertexAttribPointer(this.sprogram.tca, 2, this.gl.FLOAT, false, 0, 0);\n            this.gl.bindTexture(this.gl.TEXTURE_2D, particle.data.texture);\n            this.gl.uniform1i(this.sprogram.samplerUniform, 0);\n            this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.unitIBuffer);\n\n            this.gl.drawElements(this.gl.TRIANGLES, 6, this.gl.UNSIGNED_SHORT, 0);\n\n            this.mstack.pop();\n        }\n    }\n\n    onParticleDead(particle) { }\n\n    updateMatrix(particle) {\n        const moveOriginMatrix = WebGLUtil.makeTranslation(-particle.data.textureWidth / 2, -particle.data.textureHeight / 2);\n        const translationMatrix = WebGLUtil.makeTranslation(particle.p.x, particle.p.y);\n\n        const angel = particle.rotation * (MathUtil.PI_180);\n        const rotationMatrix = WebGLUtil.makeRotation(angel);\n\n        const scale = particle.scale * particle.data.oldScale;\n        const scaleMatrix = WebGLUtil.makeScale(scale, scale);\n        let matrix = WebGLUtil.matrixMultiply(moveOriginMatrix, scaleMatrix);\n\n        matrix = WebGLUtil.matrixMultiply(matrix, rotationMatrix);\n        matrix = WebGLUtil.matrixMultiply(matrix, translationMatrix);\n\n        Mat3.inverse(matrix, particle.data.imat);\n        matrix[2] = particle.alpha;\n\n        this.mstack.push(matrix);\n    }\n}","import BaseRenderer from \"./BaseRenderer\";\n\nexport default class CustomRenderer extends BaseRenderer {\n  constructor(element) {\n    super(element);\n\n    this.name = \"CustomRenderer\";\n  }\n}\n","import Zone from \"./Zone\";\nimport Util from \"../utils/Util\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class LineZone extends Zone {\n  constructor(x1, y1, x2, y2, direction) {\n    super();\n\n    if (x2 - x1 >= 0) {\n      this.x1 = x1;\n      this.y1 = y1;\n      this.x2 = x2;\n      this.y2 = y2;\n    } else {\n      this.x1 = x2;\n      this.y1 = y2;\n      this.x2 = x1;\n      this.y2 = y1;\n    }\n\n    this.dx = this.x2 - this.x1;\n    this.dy = this.y2 - this.y1;\n\n    this.minx = Math.min(this.x1, this.x2);\n    this.miny = Math.min(this.y1, this.y2);\n    this.maxx = Math.max(this.x1, this.x2);\n    this.maxy = Math.max(this.y1, this.y2);\n\n    this.dot = this.x2 * this.y1 - this.x1 * this.y2;\n    this.xxyy = this.dx * this.dx + this.dy * this.dy;\n\n    this.gradient = this.getGradient();\n    this.length = this.getLength();\n    this.direction = Util.initValue(direction, \">\");\n  }\n\n  getPosition() {\n    this.random = Math.random();\n\n    this.vector.x =\n      this.x1 + this.random * this.length * Math.cos(this.gradient);\n    this.vector.y =\n      this.y1 + this.random * this.length * Math.sin(this.gradient);\n\n    return this.vector;\n  }\n\n  getDirection(x, y) {\n    const A = this.dy;\n    const B = -this.dx;\n    const C = this.dot;\n    const D = B === 0 ? 1 : B;\n\n    if ((A * x + B * y + C) * D > 0) return true;\n    else return false;\n  }\n\n  getDistance(x, y) {\n    const A = this.dy;\n    const B = -this.dx;\n    const C = this.dot;\n    const D = A * x + B * y + C;\n\n    return D / Math.sqrt(this.xxyy);\n  }\n\n  getSymmetric(v) {\n    const tha2 = v.getGradient();\n    const tha1 = this.getGradient();\n    const tha = 2 * (tha1 - tha2);\n\n    const oldx = v.x;\n    const oldy = v.y;\n\n    v.x = oldx * Math.cos(tha) - oldy * Math.sin(tha);\n    v.y = oldx * Math.sin(tha) + oldy * Math.cos(tha);\n\n    return v;\n  }\n\n  getGradient() {\n    return Math.atan2(this.dy, this.dx);\n  }\n\n  rangeOut(particle) {\n    const angle = Math.abs(this.getGradient());\n\n    if (angle <= MathUtil.PI / 4) {\n      if (particle.p.x <= this.maxx && particle.p.x >= this.minx) return true;\n    } else {\n      if (particle.p.y <= this.maxy && particle.p.y >= this.miny) return true;\n    }\n\n    return false;\n  }\n\n  getLength() {\n    return Math.sqrt(this.dx * this.dx + this.dy * this.dy);\n  }\n\n  crossing(particle) {\n    if (this.crossType === \"dead\") {\n      if (\n        this.direction === \">\" ||\n        this.direction === \"R\" ||\n        this.direction === \"right\" ||\n        this.direction === \"down\"\n      ) {\n        if (!this.rangeOut(particle)) return;\n        if (this.getDirection(particle.p.x, particle.p.y)) particle.dead = true;\n      } else {\n        if (!this.rangeOut(particle)) return;\n        if (!this.getDirection(particle.p.x, particle.p.y))\n          particle.dead = true;\n      }\n    } else if (this.crossType === \"bound\") {\n      if (!this.rangeOut(particle)) return;\n\n      if (this.getDistance(particle.p.x, particle.p.y) <= particle.radius) {\n        if (this.dx === 0) {\n          particle.v.x *= -1;\n        } else if (this.dy === 0) {\n          particle.v.y *= -1;\n        } else {\n          this.getSymmetric(particle.v);\n        }\n      }\n    } else if (this.crossType === \"cross\") {\n      if (this.alert) {\n        console.error(\"Sorry, LineZone does not support cross method!\");\n        this.alert = false;\n      }\n    }\n  }\n}\n","import Zone from \"./Zone\";\nimport MathUtil from \"../math/MathUtil\";\n\nexport default class CircleZone extends Zone {\n  constructor(x, y, radius) {\n    super();\n\n    this.x = x;\n    this.y = y;\n    this.radius = radius;\n\n    this.angle = 0;\n    this.center = { x, y };\n  }\n\n  getPosition() {\n    this.angle = MathUtil.PIx2 * Math.random();\n    this.randomRadius = Math.random() * this.radius;\n\n    this.vector.x = this.x + this.randomRadius * Math.cos(this.angle);\n    this.vector.y = this.y + this.randomRadius * Math.sin(this.angle);\n\n    return this.vector;\n  }\n\n  setCenter(x, y) {\n    this.center.x = x;\n    this.center.y = y;\n  }\n\n  crossing(particle) {\n    const d = particle.p.distanceTo(this.center);\n\n    if (this.crossType === \"dead\") {\n      if (d - particle.radius > this.radius) particle.dead = true;\n    } else if (this.crossType === \"bound\") {\n      if (d + particle.radius >= this.radius) this.getSymmetric(particle);\n    } else if (this.crossType === \"cross\") {\n      if (this.alert) {\n        console.error(\"Sorry, CircleZone does not support cross method!\");\n        this.alert = false;\n      }\n    }\n  }\n\n  getSymmetric(particle) {\n    let tha2 = particle.v.getGradient();\n    let tha1 = this.getGradient(particle);\n\n    let tha = 2 * (tha1 - tha2);\n    let oldx = particle.v.x;\n    let oldy = particle.v.y;\n\n    particle.v.x = oldx * Math.cos(tha) - oldy * Math.sin(tha);\n    particle.v.y = oldx * Math.sin(tha) + oldy * Math.cos(tha);\n  }\n\n  getGradient(particle) {\n    return (\n      -MathUtil.PI_2 +\n      Math.atan2(particle.p.y - this.center.y, particle.p.x - this.center.x)\n    );\n  }\n}\n","import Zone from \"./Zone\";\n\nexport default class RectZone extends Zone {\n  constructor(x, y, width, height) {\n    super();\n\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  getPosition() {\n    this.vector.x = this.x + Math.random() * this.width;\n    this.vector.y = this.y + Math.random() * this.height;\n\n    return this.vector;\n  }\n\n  crossing(particle) {\n    // particle dead zone\n    if (this.crossType === \"dead\") {\n      if (particle.p.x + particle.radius < this.x) particle.dead = true;\n      else if (particle.p.x - particle.radius > this.x + this.width)\n        particle.dead = true;\n\n      if (particle.p.y + particle.radius < this.y) particle.dead = true;\n      else if (particle.p.y - particle.radius > this.y + this.height)\n        particle.dead = true;\n    }\n\n    // particle bound zone\n    else if (this.crossType === \"bound\") {\n      if (particle.p.x - particle.radius < this.x) {\n        particle.p.x = this.x + particle.radius;\n        particle.v.x *= -1;\n      } else if (particle.p.x + particle.radius > this.x + this.width) {\n        particle.p.x = this.x + this.width - particle.radius;\n        particle.v.x *= -1;\n      }\n\n      if (particle.p.y - particle.radius < this.y) {\n        particle.p.y = this.y + particle.radius;\n        particle.v.y *= -1;\n      } else if (particle.p.y + particle.radius > this.y + this.height) {\n        particle.p.y = this.y + this.height - particle.radius;\n        particle.v.y *= -1;\n      }\n    }\n\n    // particle cross zone\n    else if (this.crossType === \"cross\") {\n      if (particle.p.x + particle.radius < this.x && particle.v.x <= 0)\n        particle.p.x = this.x + this.width + particle.radius;\n      else if (\n        particle.p.x - particle.radius > this.x + this.width &&\n        particle.v.x >= 0\n      )\n        particle.p.x = this.x - particle.radius;\n\n      if (particle.p.y + particle.radius < this.y && particle.v.y <= 0)\n        particle.p.y = this.y + this.height + particle.radius;\n      else if (\n        particle.p.y - particle.radius > this.y + this.height &&\n        particle.v.y >= 0\n      )\n        particle.p.y = this.y - particle.radius;\n    }\n  }\n}\n","import Zone from \"./Zone\";\nimport Util from \"../utils/Util\";\n\nexport default class ImageZone extends Zone {\n  constructor(imageData, x, y, d) {\n    super();\n\n    this.reset(imageData, x, y, d);\n  }\n\n  reset(imageData, x, y, d) {\n    this.imageData = imageData;\n    this.x = Util.initValue(x, 0);\n    this.y = Util.initValue(y, 0);\n    this.d = Util.initValue(d, 2);\n\n    this.vectors = [];\n    this.setVectors();\n  }\n\n  setVectors() {\n    let i, j;\n    const length1 = this.imageData.width;\n    const length2 = this.imageData.height;\n\n    for (i = 0; i < length1; i += this.d) {\n      for (j = 0; j < length2; j += this.d) {\n        let index = ((j >> 0) * length1 + (i >> 0)) * 4;\n\n        if (this.imageData.data[index + 3] > 0) {\n          this.vectors.push({ x: i + this.x, y: j + this.y });\n        }\n      }\n    }\n\n    return this.vector;\n  }\n\n  getBound(x, y) {\n    var index = ((y >> 0) * this.imageData.width + (x >> 0)) * 4;\n    if (this.imageData.data[index + 3] > 0) return true;\n    else return false;\n  }\n\n  getPosition() {\n    const vector = Util.getRandFromArray(this.vectors);\n    return this.vector.copy(vector);\n  }\n\n  getColor(x, y) {\n    x -= this.x;\n    y -= this.y;\n    var i = ((y >> 0) * this.imageData.width + (x >> 0)) * 4;\n\n    return {\n      r: this.imageData.data[i],\n      g: this.imageData.data[i + 1],\n      b: this.imageData.data[i + 2],\n      a: this.imageData.data[i + 3]\n    };\n  }\n\n  crossing(particle) {\n    if (this.crossType === \"dead\") {\n      if (this.getBound(particle.p.x - this.x, particle.p.y - this.y))\n        particle.dead = true;\n      else particle.dead = false;\n    } else if (this.crossType === \"bound\") {\n      if (!this.getBound(particle.p.x - this.x, particle.p.y - this.y))\n        particle.v.negate();\n    }\n  }\n}\n","import ColorUtil from \"../utils/ColorUtil\";\nimport CircleZone from \"../zone/CircleZone\";\nimport PointZone from \"../zone/PointZone\";\nimport LineZone from \"../zone/LineZone\";\nimport RectZone from \"../zone/RectZone\";\n\nexport default {\n  addEventListener(proton, func) {\n    proton.addEventListener(\"PROTON_UPDATE_AFTER\", () => func());\n  },\n\n  getStyle(color = \"#ff0000\") {\n    const rgb = ColorUtil.hexToRgb(color);\n    return `rgba(${rgb.r}, ${rgb.g}, ${rgb.b}, 0.5)`;\n  },\n\n  drawZone(proton, canvas, zone, clear) {\n    const context = canvas.getContext(\"2d\");\n    const style = this.getStyle();\n\n    this.addEventListener(proton, () => {\n      if (clear) context.clearRect(0, 0, canvas.width, canvas.height);\n\n      if (zone instanceof PointZone) {\n        context.beginPath();\n        context.fillStyle = style;\n        context.arc(zone.x, zone.y, 10, 0, Math.PI * 2, true);\n        context.fill();\n        context.closePath();\n      } else if (zone instanceof LineZone) {\n        context.beginPath();\n        context.strokeStyle = style;\n        context.moveTo(zone.x1, zone.y1);\n        context.lineTo(zone.x2, zone.y2);\n        context.stroke();\n        context.closePath();\n      } else if (zone instanceof RectZone) {\n        context.beginPath();\n        context.strokeStyle = style;\n        context.drawRect(zone.x, zone.y, zone.width, zone.height);\n        context.stroke();\n        context.closePath();\n      } else if (zone instanceof CircleZone) {\n        context.beginPath();\n        context.strokeStyle = style;\n        context.arc(zone.x, zone.y, zone.radius, 0, Math.PI * 2, true);\n        context.stroke();\n        context.closePath();\n      }\n    });\n  },\n\n  drawEmitter(proton, canvas, emitter, clear) {\n    const context = canvas.getContext(\"2d\");\n    const style = this.getStyle();\n\n    this.addEventListener(proton, () => {\n      if (clear) context.clearRect(0, 0, canvas.width, canvas.height);\n\n      context.beginPath();\n      context.fillStyle = style;\n      context.arc(emitter.p.x, emitter.p.y, 10, 0, Math.PI * 2, true);\n      context.fill();\n      context.closePath();\n    });\n  }\n};\n","/**\n *  RAFManager requestAnimationFrame Manager\n * \n *  Simple package\n * \n *  CODE:\n * \n * \t\t// Add to\n *  \t-- RAFManager.add(func);\n * \n *   \t// Add and carry parameters\n *  \t-- const func = data =>{ console.log(data) };\n *  \t-- RAFManager.add(func, 25, { msg:'hello world!' }); \n * \t\t\n * \t\t// remove\n *  \t-- RAFManager.remove(func);\n *  \t-- RAFManager.stop();\t\n*/\n\n// simple polyfill by https://gist.github.com/paulirish/1579671\n(function () {\n\tlet lastTime = 0;\n\tlet vendors = ['ms', 'moz', 'webkit', 'o'];\n\tfor (let x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n\t\twindow.requestAnimationFrame = window[vendors[x] + 'RequestAnimationFrame'];\n\t\twindow.cancelAnimationFrame = window[vendors[x] + 'CancelAnimationFrame']\n\t\t\t|| window[vendors[x] + 'CancelRequestAnimationFrame'];\n\t}\n}());\n\nconst RAFManager = {\n\ttimer: 0,\n\tstate: 'stop',\n\tanimations: [],\n\n\tadd(callback, fps = 60, param = null) {\n\t\tconst n = 60 / fps;\n\t\tconst aniData = { callback, fps, n, param, i: 0 };\n\t\tthis.animations.push(aniData);\n\t\tif (this.animations.length >= 1) this.start();\n\n\t\treturn this;\n\t},\n\n\tgetIndex(callback) {\n\t\tfor (let i = 0; i < this.animations.length; i++) {\n\t\t\tconst aniData = this.animations[i];\n\t\t\tif (aniData.callback === callback) return i;\n\t\t}\n\n\t\treturn -1;\n\t},\n\n\tremove(callback) {\n\t\tconst index = this.getIndex(callback);\n\t\tif (index < 0) return;\n\n\t\tthis.deleteMap(callback);\n\t\tif (this.animations.length === 0) this.stop();\n\n\t\treturn this;\n\t},\n\n\tdeleteMap(callback) {\n\t\tconst index = this.getIndex(callback);\n\t\tconst aniData = this.animations[index];\n\t\tfor (let key in aniData) delete aniData[key];\n\n\t\tthis.animations.splice(index, 1);\n\t},\n\n\tstart() {\n\t\tif (this.state === 'start') return;\n\n\t\tthis.state = 'start';\n\t\tthis.tick();\n\t\treturn this;\n\t},\n\n\tstop() {\n\t\tif (this.state === 'stop') return;\n\n\t\tthis.state = 'stop';\n\t\tcancelAnimationFrame(this.timer);\n\t\treturn this;\n\t},\n\n\ttick() {\n\t\tthis.timer = requestAnimationFrame(() => { this.tick(); });\n\n\t\tfor (let i = 0; i < this.animations.length; i++) {\n\t\t\tconst aniData = this.animations[i];\n\t\t\tconst callback = aniData.callback;\n\t\t\tconst param = aniData.param;\n\n\t\t\taniData.i++;\n\t\t\tif (aniData.i >= aniData.n) {\n\t\t\t\tcallback(param);\n\t\t\t\taniData.i = 0;\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport default RAFManager;","import Stats from \"stats.js\";\nimport Proton from \"proton-engine\";\nimport RAFManager from \"raf-manager\";\nimport \"./styles.css\";\n\nlet stats;\nlet canvas;\nlet context;\nlet proton;\nlet renderer;\nlet emitter;\n\nmain();\n\nfunction main() {\n  initCanvas();\n  initStats();\n  createProton();\n  render();\n}\n\nfunction initCanvas() {\n  canvas = document.getElementById(\"canvas\");\n  canvas.width = window.innerWidth;\n  canvas.height = window.innerHeight;\n  context = canvas.getContext(\"2d\");\n\n  window.onresize = function(e) {\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    emitter.p.x = canvas.width / 2;\n    emitter.p.y = canvas.height / 2;\n  };\n}\n\nfunction initStats() {\n  stats = new Stats();\n  stats.setMode(2);\n  stats.domElement.style.position = \"absolute\";\n  stats.domElement.style.left = \"0px\";\n  stats.domElement.style.top = \"0px\";\n  document.body.appendChild(stats.domElement);\n}\n\nfunction createProton() {\n  proton = new Proton();\n  emitter = new Proton.Emitter();\n  emitter.rate = new Proton.Rate(\n    new Proton.Span(10, 20),\n    new Proton.Span(0.1, 0.25)\n  );\n  emitter.addInitialize(new Proton.Mass(1));\n  emitter.addInitialize(new Proton.Radius(1, 12));\n  emitter.addInitialize(new Proton.Life(2, 4));\n  emitter.addInitialize(\n    new Proton.Velocity(\n      new Proton.Span(2, 4),\n      new Proton.Span(-30, 30),\n      \"polar\"\n    )\n  );\n  emitter.addBehaviour(new Proton.RandomDrift(30, 30, 0.05));\n  emitter.addBehaviour(\n    new Proton.Color(\"ff0000\", \"random\", Infinity, Proton.easeOutQuart)\n  );\n  emitter.addBehaviour(new Proton.Scale(1, 0.7));\n  emitter.p.x = canvas.width / 2;\n  emitter.p.y = canvas.height / 2;\n  emitter.emit();\n\n  proton.addEmitter(emitter);\n  renderer = new Proton.CanvasRenderer(canvas);\n  renderer.onProtonUpdate = () => {\n    context.fillStyle = \"rgba(0, 0, 0, 0.1)\";\n    context.fillRect(0, 0, canvas.width, canvas.height);\n  };\n  proton.addRenderer(renderer);\n}\n\nfunction render() {\n  RAFManager.add(() => {\n    stats.begin();\n    emitter.rotation += 1.5;\n    proton.update();\n    stats.end();\n  });\n}\n"]}